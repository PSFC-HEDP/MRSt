/**
 * MIT License
 * 
 * Copyright (c) 2018 Justin Kunimune
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package main;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;

import main.NumericalMethods.DiscreteFunction;

/**
 * the class where all the math is.
 * 
 * @author Justin Kunimune
 */
public class MonteCarlo {
	
	private static final double SPEED_OF_LIGHT = 2.99792458e8;
	private static final int STOPPING_DISTANCE_RESOLUTION = 36;
	
	private final double foilDistance; // z coordinate of midplane of foil [m]
	private final double foilThickness; // thickness of foil [m]
	private final double apertureDistance; // distance from TCC to aperture [m]
	private final double apertureWidth; // horizontal dimension of aperture [m]
	private final double apertureHeight; // vertical dimension of aperture [m]
	private final double cosyK0, cosyV0, cosyT0; // reference coordinates for beam used by COSY [J], [m/s], [s?]
	private final double[][] cosyCoefficients; // table of coefficients generated by COSY
	private final int[][] cosyExponents; // table of term powers generated by COSY
	private final Particle ion; // either D or P, but probably D
	
	private final double probHitsFoil; // probability that the neutron goes through the foil
	private final double probMakesDeuteron; // probability that the neutron interacts with the foil and releases a deuteron
	private final double probHitsAperture; // probability that a secondary deuteron goes through the aperture
	
	private final DiscreteFunction distanceVsEnergy;
	private final DiscreteFunction energyVsDistance;
	
	/**
	 * perform some preliminary calculations for the provided configuration.
	 * @param stoppingPower a double[][] containing two columns and n rows. the zeroth column is
	 * the reference values of E in [keV] and the last column is the corresponding values of
	 * dE/dx in [keV/μm].
	 * @param referenceEnergy expected ion energy used in COSY calculation [eV]
	 */
	public MonteCarlo(
			double foilDistance, double foilRadius, double foilThickness,
			double foilDensity, double foilCrossSection, double[][] stoppingPowerData,
			double apertureDistance, double apertureWidth, double apertureHeight,
			double referenceEnergy, double[][] cosyCoefficients, int[][] cosyExponents,
			Particle ion) {
		this.foilDistance = foilDistance;
		this.foilThickness = foilThickness;
		this.apertureDistance = apertureDistance;
		this.apertureWidth = apertureWidth;
		this.apertureHeight = apertureHeight;
		this.cosyK0 = referenceEnergy*(-Particle.E.charge); // save this in a more useful unit
		this.cosyV0 = Math.sqrt(2*cosyK0/ion.mass); // and get the corresponding speed
		double γ = Math.pow(1 - Math.pow(cosyV0/SPEED_OF_LIGHT, 2), -1/2.);
		this.cosyT0 = -(1+γ)/γ/cosyV0; // and why is time measured in units of distance?
		this.cosyCoefficients = cosyCoefficients; // TODO filter out terms above a maximum order
		this.cosyExponents = cosyExponents;
		this.ion = ion;
		
		double foilMaxAngle = Math.atan(foilRadius/foilDistance);
		this.probHitsFoil = (1 - Math.cos(foilMaxAngle))/2;
		this.probMakesDeuteron = foilDensity*foilCrossSection*foilThickness; // TODO: this should be a function of energy
		this.probHitsAperture = apertureWidth*apertureHeight /
				(4*Math.PI*Math.pow(apertureDistance,2)); // TODO: account for anisotropic scattering
		
		double[] dxdE = new double[stoppingPowerData.length]; // integrate the stopping power to get stopping distance
		double[] E = new double[stoppingPowerData.length];
		for (int i = 0; i < stoppingPowerData.length; i ++) {
			dxdE[i] = 1/(stoppingPowerData[i][1]*1e9*(-Particle.E.charge)); // converting from [GeV/m] to [m/J]
			E[i] = stoppingPowerData[i][0]*1e3*(-Particle.E.charge); // and from [keV] to [J]
		}
		DiscreteFunction distanceVsEnergyRaw = new DiscreteFunction(E, dxdE).antiderivative();
		this.distanceVsEnergy = distanceVsEnergyRaw.indexed(STOPPING_DISTANCE_RESOLUTION);
		this.energyVsDistance = distanceVsEnergyRaw.inv().indexed(STOPPING_DISTANCE_RESOLUTION);
	}
	
	public double efficiency(double energy) {
		return probHitsFoil * probMakesDeuteron * probHitsAperture;
	}
	
	/**
	 * simulate a single random neutron emitted from TCC at the given energy and determine the position and velocity at which its child deuteron crosses the focal plane.
	 * @param energy initial energy of released neutron [eV].
	 * @param time initial time of released neutron [s].
	 * @return { hypot(x,z), t } [m, s].
	 */
	public double[] response(double energy, double time) {
		System.out.print("[");
		System.out.print(energy+", ");
		
		double[] rCollision = chooseCollisionPosition();
		
		double[] rAperture = chooseAperturePosition();
		
		double[] vFinal = computeFinalVelocity(energy, rCollision, rAperture);
		
		double[] rFocal = computeFocusedPosition(rAperture, vFinal, time);
		System.out.print(rFocal[3]);
		
		System.out.println("],");
		return rFocal;
	}
	
	/**
	 * choose a random location in the foil for the neutron to collide.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseCollisionPosition() {
		double θ = Math.acos(1 - 2*Math.random()*probHitsFoil);
		double r = foilDistance*Math.tan(θ); // NOTE: original code assumes uniform distribution within foil; I account for nonzero solid angle subtended at TCC.
		double φ = Math.random()*2*Math.PI;
		double z = foilDistance + (2*Math.random()-1)*foilThickness/2; // assume foil is thin, so every z coordinate is equally likely
		return new double[] { r*Math.cos(φ), r*Math.sin(φ), z };
	}
	
	/**
	 * choose a random location in the aperture plane for the deuteron to pass through.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseAperturePosition() {
		double x = (2*Math.random()-1)*apertureWidth/2; // assume aperture is far away, so every point in it is equally likely to be hit
		double y = (2*Math.random()-1)*apertureHeight/2;
		double z = apertureDistance;
		return new double[] { x, y, z };
	}
	
	/**
	 * compute the velocity with which the deuteron passes through the aperture.
	 * @param vInitial {vx,vy,vz} of the neutron as it enters the foil [m/s].
	 * @param A ratio of charged particle mass to neutron mass.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param rAperture {x,y,z} of the point where the deuteron passes through the aperture [m].
	 * @return { vx, vy, vz } [m/s]
	 */
	private double[] computeFinalVelocity(
			double energy, double[] rFoil, double[] rAperture) {
		double E0 = -Particle.E.charge*energy; // convert energy from [eV] to [J]
		
		double[] nHat = { // get the unit vector in the direction of the neutron
				rFoil[0], rFoil[1], rFoil[2] };
		double norm = Math.sqrt(sqr(nHat));
		for (int i = 0; i < 3; i ++)
			nHat[i] /= norm;
		
		double[] dHat = { // and the unit vector in the direction of the ion
				rAperture[0] - rFoil[0], rAperture[1] - rFoil[1], rAperture[2] - rFoil[2] };
		norm = Math.sqrt(sqr(dHat));
		for (int i = 0; i < 3; i ++)
			dHat[i] /= norm;
		
		double cosθ = nHat[0]*dHat[0] + nHat[1]*dHat[1] + nHat[2]*dHat[2];
		double A = ion.mass/Particle.N.mass; // assume elastic collision between neutron and ion
		double E1 = 4*A/Math.pow(A + 1, 2)*E0*cosθ*cosθ; // TODO this is a little redundant; see if it's worth computing ahead of time
		double distance = (foilDistance + foilThickness/2 - rFoil[2])/dHat[2];
		E1 = energyVsDistance.evaluate(distanceVsEnergy.evaluate(E1) - distance); // lose some energy by dragging through the foil
		double v = Math.sqrt(2*E1/ion.mass); // get the resulting velocity
		return new double[] { v*dHat[0], v*dHat[1], v*dHat[2] };
	}
	
	/**
	 * evaluate the mapping provided by COSY to obtain the time and position and velocity at
	 * which the ion passes the back reference plane.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param vInit {vx,vy,vz} of the deuteron as it exits the foil
	 * @param tNeutron the time at which the neutron was released [s].
	 * @return { x, y, z, t } at which it strikes the focal plane [m, m, s]
	 */
	private double[] computeFocusedPosition(double[] rFoil, double[] vInit, double tNeutron) {
		double x0 = rFoil[0], y0 = rFoil[1]; // COSY takes spatial coordinates in [m] (assume foil is thin so we can ignore rFoil[2])
		double a0 = vInit[0]/cosyV0, b0 = vInit[1]/cosyV0; // angular coordinates in [rad] (more or less)
		double t0 = 0; // t0 has weird coordinates, but we can just let it be 0
		double K0 = 1/2.*ion.mass*sqr(vInit); // for the 'd' coordinate, we must convert velocity to energy
		double d0 = (K0 - cosyK0)/cosyK0; // and then compare that to an expected reference energy
		double[] input = { x0, a0, y0, b0, t0, d0 };
		double[] output = new double[5];
		for (int i = 0; i < output.length; i ++) { // the polynomial is pretty simple to compute
			output[i] = 0;
			for (int j = 0; j < cosyCoefficients.length; j ++) {
				double term = cosyCoefficients[j][i];
				for (int k = 0; k < input.length; k ++) {
					term *= Math.pow(input[k], cosyExponents[j][k]);
				}
				output[i] += term;
			}
		}
		double[] rFinal = { output[0], output[2] };
		double tFinal = tNeutron + output[4]*cosyT0; // TODO: account for tilted focus plane
		
		return new double[] { rFinal[0], rFinal[1], 0, tFinal };
	}
	
	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException {
		MonteCarlo sim = new MonteCarlo(
				3.0e-3, 0.3e-3, 80e-6,
				10, 10, CSV.read(new File("data/stopping_power_deuterons.csv"), ','),
				6e0, 4.0e-3, 20.0e-3, 12.45e6,
				CSV.readCosyCoefficients(new File("data/MRSt_IRF_FP tilted.txt")),
				CSV.readCosyExponents(new File("data/MRSt_IRF_FP tilted.txt")), Particle.D);
		for (int i = 0; i < 10; i ++)
			sim.response(14e6, 0);
//		System.out.println(Arrays.toString(sim.response(14)));
	}
	
	/**
	 * square a vector, because this takes so long to write out every time.
	 * @param v
	 * @return
	 */
	private static double sqr(double[] v) {
		double s = 0;
		for (double x: v)
			s += Math.pow(x, 2);
		return s;
	}
	
}
