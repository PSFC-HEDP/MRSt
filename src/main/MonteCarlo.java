/**
 * MIT License
 * 
 * Copyright (c) 2018 Justin Kunimune
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package main;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;

import main.NumericalMethods.DiscreteFunction;

/**
 * the class where all the math is.
 * 
 * @author Justin Kunimune
 */
public class MonteCarlo {
	
	private static final int x = 0, y = 1, z = 2;
	
	private static final double SPEED_OF_LIGHT = 2.99792458e8;
	
	private static final int STOPPING_DISTANCE_RESOLUTION = 64;
	private static final double MIN_X = -40, MAX_X = 20; // histogram bounds [cm]
	private static final double MIN_T = -20, MAX_T = 45; // histogram bounds [ns]
	private static final double MAX_PRECISION = 10; // to save computation time, cap computations when we get this close
	
	private final double foilDistance; // z coordinate of midplane of foil [m]
	private final double foilThickness; // thickness of foil [m]
	private final double apertureDistance; // distance from TCC to aperture [m]
	private final double apertureWidth; // horizontal dimension of aperture [m]
	private final double apertureHeight; // vertical dimension of aperture [m]
	private final double cosyK0, cosyV0, cosyT0, cosyT1; // reference coordinates for beam used by COSY [J], [m/s], [s], [s?]
	private final double focalPlaneAngle; // angle of focal plane [rad]
	private final double[][] cosyCoefficients; // table of coefficients generated by COSY
	private final int[][] cosyExponents; // table of term powers generated by COSY
	private final Particle ion; // either D or P, but probably D
	
	private final double probHitsFoil; // probability that the neutron goes through the foil
	private final double probMakesIon; // probability that the neutron interacts with the foil and releases a deuteron
	private final double probHitsAperture; // probability that a secondary deuteron goes through the aperture
	
	private final DiscreteFunction distanceVsEnergy;
	private final DiscreteFunction energyVsDistance;
	
	private final double[] positionBins; // centers of x bins for response function [cm]
	private final double[] timeBins; // centers of time bins for response function [ns]
	
	/**
	 * perform some preliminary calculations for the provided configuration.
	 * @param stoppingPower a double[][] containing two columns and n rows. the zeroth column is
	 * the reference values of E in [keV] and the last column is the corresponding values of
	 * dE/dx in [keV/μm].
	 * @param focalTilt angle of the focal plane (0 means untilted) [deg]
	 * @param referenceEnergy expected ion energy used in COSY calculation [eV]
	 */
	public MonteCarlo(
			Particle ion, double foilDistance, double foilRadius, double foilThickness,
			double foilDensity, double foilCrossSection, double[][] stoppingPowerData,
			double apertureDistance, double apertureWidth, double apertureHeight,
			double referenceEnergy, double[][] cosyCoefficients, int[][] cosyExponents,
			double focalTilt, int numBins) {
		this.foilDistance = foilDistance;
		this.foilThickness = foilThickness;
		this.apertureDistance = apertureDistance;
		this.apertureWidth = apertureWidth;
		this.apertureHeight = apertureHeight;
		this.cosyK0 = referenceEnergy*(-Particle.E.charge); // save this in a more useful unit
		this.cosyV0 = Math.sqrt(2*cosyK0/ion.mass); // and get the corresponding speed
		double γ = Math.pow(1 - Math.pow(cosyV0/SPEED_OF_LIGHT, 2), -1/2.);
		this.cosyT0 = apertureDistance/cosyV0; // and corresponding time (assume it goes through lens instantaneously)
		this.cosyT1 = -(1+γ)/γ/cosyV0; // and why is time measured in units of distance?
		this.focalPlaneAngle = Math.toRadians(focalTilt);
		this.cosyCoefficients = cosyCoefficients; // TODO filter out terms above a maximum order
		this.cosyExponents = cosyExponents;
		this.ion = ion;
		
		double foilMaxAngle = Math.atan(foilRadius/foilDistance);
		this.probHitsFoil = (1 - Math.cos(foilMaxAngle))/2;
		this.probMakesIon = foilDensity*foilCrossSection*foilThickness; // TODO: this should be a function of energy
		this.probHitsAperture = apertureWidth*apertureHeight /
				(4*Math.PI*Math.pow(apertureDistance,2)); // TODO: account for anisotropic scattering
		
		double[] dxdE = new double[stoppingPowerData.length]; // integrate the stopping power to get stopping distance
		double[] E = new double[stoppingPowerData.length];
		for (int i = 0; i < stoppingPowerData.length; i ++) {
			dxdE[i] = 1/(stoppingPowerData[i][1]*1e9*(-Particle.E.charge)); // converting from [GeV/m] to [m/J]
			E[i] = stoppingPowerData[i][0]*1e3*(-Particle.E.charge); // and from [keV] to [J]
		}
		DiscreteFunction distanceVsEnergyRaw = new DiscreteFunction(E, dxdE).antiderivative();
		this.distanceVsEnergy = distanceVsEnergyRaw.indexed(STOPPING_DISTANCE_RESOLUTION);
		this.energyVsDistance = distanceVsEnergyRaw.inv().indexed(STOPPING_DISTANCE_RESOLUTION);
		
		this.timeBins = new double[numBins]; // linearly space the output bins
		this.positionBins = new double[numBins];
		for (int i = 0; i < numBins; i ++) {
			this.timeBins[i] = cosyT0/1e-9 + MIN_T + i*(MAX_T - MIN_T)/(numBins-1);
			this.positionBins[i] = MIN_X + i*(MAX_X - MIN_X)/(numBins-1);
		}
	}
	
	public double efficiency(double energy) {
		return probHitsFoil * probMakesIon * probHitsAperture;
	}
	
	/**
	 * compute the total response to an implosion with the given neutron spectrum.
	 * @param energies the energies that describe the rows of counts [MeV]
	 * @param times the times that describe the columns of counts [ns]
	 * @param counts the time- and energy- resolved neutron spectrum in number of neutrons. each
	 * row corresponds to one element of energies, and each column one element of times.
	 * @return the time- and position- resolved ion spectrum measured at the focal plane. each
	 * row corresponds to one element of this.energyBins, and each column corresponds to one
	 * element of this.timeBins.
	 */
	public double[][] response(double[] energies, double[] times, double[][] counts) {
		double[][] response = new double[positionBins.length][timeBins.length];
		for (int i = 0; i < energies.length; i ++) { // for each input bin
			for (int j = 0; j < times.length; j ++) {
				double expNumParticles = counts[i][j]*this.efficiency(energies[i]); // read how many particles we should expect
				double numParticles = expNumParticles; // TODO add some Poisson randomization
				int numSimulations = (int) Math.min(numParticles, Math.pow(MAX_PRECISION, 2)); // but don't go crazy if we don't have to
				double weight = numParticles/numSimulations; // just remember to weigh it properly if you reduce the number of particles
				for (int k = 0; k < numSimulations; k ++) {
					double[] xt = this.response(energies[i]*1e6, times[j]*1e-9); // do the simulation in SI
					double x = xt[0]/1e-2, t = xt[1]/1e-9; // then convert to readable units
					int positionBin = (int)Math.round(
							(x - MIN_X)/(MAX_X - MIN_X)*(positionBins.length-1)); // locate its bin
					if (positionBin < 0)                    positionBin = 0;
					if (positionBin >= positionBins.length) positionBin = positionBins.length-1;
					int timeBin = (int)Math.round(
							(t - cosyT0/1e-9 - MIN_T)/(MAX_T - MIN_T)*(timeBins.length-1));
					if (timeBin < 0)                timeBin = 0;
					if (timeBin >= timeBins.length) timeBin = timeBins.length-1;
					response[positionBin][timeBin] += weight; // finally, add it to the tally
				}
			}
		}
		return response;
	}
	
	/**
	 * simulate a single random neutron emitted from TCC at the given energy and determine the
	 * position and time at which its child ion crosses the focal plane.
	 * @param energy initial energy of released neutron [eV].
	 * @param time initial time of released neutron [s].
	 * @return { signed hypot(x,z), t } [m, s].
	 */
	public double[] response(double energy, double time) {
//		System.out.print("[");
//		System.out.print(energy+", ");
		double[] rCollision = chooseCollisionPosition();
		
		double[] rAperture = chooseAperturePosition();
		
		double[] vFinal = computeFinalVelocity(energy, rCollision, rAperture);
//		double E = 1/2.*ion.mass*sqr(vFinal);
//		System.out.print(E/Particle.P.charge+", ");
		
		double[] rFocal = computeFocusedPosition(rAperture, vFinal, time);
//		System.out.print(rFocal[0]);
		
//		System.out.println("],");
		return new double[] { rFocal[x]/Math.cos(focalPlaneAngle), rFocal[3] };
	}
	
	/**
	 * choose a random location in the foil for the neutron to collide.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseCollisionPosition() {
		double θF = Math.acos(1 - 2*Math.random()*probHitsFoil);
		double rF = foilDistance*Math.tan(θF); // NOTE: original code assumes uniform distribution within foil; I account for nonzero solid angle subtended at TCC.
		double φF = Math.random()*2*Math.PI;
		double zF = foilDistance + (2*Math.random()-1)*foilThickness/2; // assume foil is thin, so every z coordinate is equally likely
		return new double[] { rF*Math.cos(φF), rF*Math.sin(φF), zF };
	}
	
	/**
	 * choose a random location in the aperture plane for the deuteron to pass through.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseAperturePosition() {
		double xA = (2*Math.random()-1)*apertureWidth/2; // assume aperture is far away, so every point in it is equally likely to be hit
		double yA = (2*Math.random()-1)*apertureHeight/2;
		double zA = apertureDistance;
		return new double[] { xA, yA, zA };
	}
	
	/**
	 * compute the velocity with which the deuteron passes through the aperture.
	 * @param vInitial {vx,vy,vz} of the neutron as it enters the foil [m/s].
	 * @param A ratio of charged particle mass to neutron mass.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param rAperture {x,y,z} of the point where the deuteron passes through the aperture [m].
	 * @return { vx, vy, vz } [m/s]
	 */
	private double[] computeFinalVelocity(
			double energy, double[] rFoil, double[] rAperture) {
		double E0 = -Particle.E.charge*energy; // convert energy from [eV] to [J]
		
		double[] nHat = { // get the unit vector in the direction of the neutron
				rFoil[x], rFoil[y], rFoil[z] };
		double norm = Math.sqrt(sqr(nHat));
		for (int i = 0; i < 3; i ++)
			nHat[i] /= norm;
		
		double[] dHat = { // and the unit vector in the direction of the ion
				rAperture[0] - rFoil[0], rAperture[1] - rFoil[1], rAperture[2] - rFoil[2] };
		norm = Math.sqrt(sqr(dHat));
		for (int i = 0; i < 3; i ++)
			dHat[i] /= norm;
		
		double cosθ = nHat[x]*dHat[x] + nHat[y]*dHat[y] + nHat[z]*dHat[z];
		double A = ion.mass/Particle.N.mass; // assume elastic collision between neutron and ion
		double E1 = 4*A/Math.pow(A + 1, 2)*E0*cosθ*cosθ; // TODO this is a little redundant; see if it's worth computing ahead of time
		double distance = (foilDistance + foilThickness/2 - rFoil[2])/dHat[2];
		E1 = energyVsDistance.evaluate(distanceVsEnergy.evaluate(E1) - distance); // lose some energy by dragging through the foil
		double v = Math.sqrt(2*E1/ion.mass); // get the resulting velocity
		return new double[] { v*dHat[x], v*dHat[y], v*dHat[z] };
	}
	
	/**
	 * evaluate the mapping provided by COSY to obtain the time and position and velocity at
	 * which the ion passes the back reference plane.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param vInit {vx,vy,vz} of the deuteron as it exits the foil
	 * @param tNeutron the time at which the neutron was released [s].
	 * @return { x, y, z, t } at which it strikes the focal plane [m, m, s]
	 */
	private double[] computeFocusedPosition(double[] rFoil, double[] vInit, double tNeutron) {
		double x0 = rFoil[x], y0 = rFoil[y]; // COSY takes spatial coordinates in [m] (assume foil is thin so we can ignore rFoil[2])
		double a0 = vInit[x]/cosyV0, b0 = vInit[y]/cosyV0; // angular coordinates in [rad] (more or less)
		double t0 = 0; // t0 has weird coordinates, but we can just let it be 0
		double K0 = 1/2.*ion.mass*sqr(vInit); // for the 'd' coordinate, we must convert velocity to energy
		double d0 = (K0 - cosyK0)/cosyK0; // and then compare that to an expected reference energy
		double[] input = { x0, a0, y0, b0, t0, d0 };
		double[] output = new double[5];
		for (int i = 0; i < output.length; i ++) { // the polynomial is pretty simple to compute
			output[i] = 0;
			for (int j = 0; j < cosyCoefficients.length; j ++) {
				double term = cosyCoefficients[j][i];
				for (int k = 0; k < input.length; k ++) {
					term *= Math.pow(input[k], cosyExponents[j][k]);
				}
				output[i] += term;
			}
		}
		double[] rPlane = { output[0], output[2], 0 };
		double[] vFinal = { output[1], output[3], vInit[z] };
		double tPlane = tNeutron + cosyT0 + output[4]*cosyT1;
		
		double tFocusing = rPlane[x] / (vFinal[z]/Math.tan(focalPlaneAngle) - vFinal[x]); // finally, account for the additional t that it takes to strike the focal plane
		double[] rFocused = {
				rPlane[x] + tFocusing*vFinal[x],
				rPlane[y] + tFocusing*vFinal[y],
				rPlane[z] + tFocusing*vFinal[z] };
		
		return new double[] { rFocused[x], rFocused[y], rFocused[z], tPlane + tFocusing };
	}
	
	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException {
		MonteCarlo sim = new MonteCarlo(
				Particle.D, 3.0e-3, 0.3e-3, 80e-6,
				10, 10, CSV.read(new File("data/stopping_power_deuterons.csv"), ','),
				6e0, 4.0e-3, 20.0e-3, 12.45e6,
				CSV.readCosyCoefficients(new File("data/MRSt_IRF_FP tilted.txt")),
				CSV.readCosyExponents(new File("data/MRSt_IRF_FP tilted.txt")), 70.3,
//				CSV.readCosyExponents(new File("data/MRSt_IRF_FP not tilted.txt")), 0,
				100);
//		for (double energy = 12e6; energy < 16e6; energy += 50e3) {
//			double[] rt = sim.response(energy, 0);
//			System.out.println(String.format(Locale.US, "[%g, %g, %g],", energy, rt[0], rt[1]-sim.cosyT0));
//		}
		double[][] spectrum = CSV.read(new File("data/test_spectrum.tsv"), '\t');
		double[] timeAxis = CSV.readColumn(new File("data/test_times.tsv"));
		double[] energyAxis = CSV.readColumn(new File("data/test_energies.tsv"));
		System.out.println(Arrays.toString(timeAxis));
		System.out.println(Arrays.toString(energyAxis));
		System.out.println("[");
		for (int i = 0; i < spectrum.length; i ++)
			System.out.println("\t"+Arrays.toString(spectrum[i])+",");
		System.out.println("]");
		
		double[][] response = sim.response(energyAxis, timeAxis, spectrum);
		System.out.println(Arrays.toString(sim.timeBins));
		System.out.println(Arrays.toString(sim.positionBins));
		System.out.println("[");
		for (int i = 0; i < response.length; i ++)
			System.out.println("\t"+Arrays.toString(response[i])+",");
		System.out.println("]");
	}
	
	/**
	 * square a vector, because this takes so long to write out every time.
	 * @param v
	 * @return
	 */
	private static double sqr(double[] v) {
		double s = 0;
		for (double x: v)
			s += Math.pow(x, 2);
		return s;
	}
	
}
