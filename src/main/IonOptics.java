/**
 * MIT License
 * <p>
 * Copyright (c) 2021 Justin Kunimune
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package main;

import main.NumericalMethods.DiscreteFunction;

import java.io.File;
import java.io.IOException;

/**
 * A class to handle all of the deuteron physics, from their birth in the foil to
 * their collision with the detector plane.
 */
public class IonOptics {

	private static final double MIN_E = 12, MAX_E = 16;
	private static final int TIME_CORRECTION_RESOLUTION = 20;
	private static final int STOPPING_DISTANCE_RESOLUTION = 64;
	private static final String STOPPING_POWER_FILENAME = "input/stopping_power_%ss_CD.csv";

	private static final int x = 0, y = 1, z = 2;

	private static final double SPEED_OF_LIGHT = 2.99792458e8;
	private static final double eV = Math.abs(Particle.E.charge);
	private static final double keV = 1e3*Math.abs(Particle.E.charge);
	private static final double MeV = 1e6*Math.abs(Particle.E.charge);
	private static final double μm = 1e-6;

	private final double foilDistance; // z coordinate of midplane of foil [m]
	private final double foilWidth; // extent of foil in dispersion direccion [m]
	private final double foilHeight; // extent of foil in nondispersion direccion [m]
	private final double foilThickness; // thickness of foil [m]
	private final double apertureDistance; // distance from TCC to aperture [m]
	private final double apertureWidth; // horizontal dimension of aperture [m]
	private final double apertureHeight; // vertical dimension of aperture [m]
	private final double cosyKmin, cosyKmax; // bounds on deuterons that will be detected by the CSI [J]
	private final double cosyK0, cosyV0, cosyT0, cosyT1; // reference coordinates for beam used by COSY [J], [m/s], [s], [s?]
	private final double focalPlaneAngle; // angle of focal plane [rad]
	private final double[][] cosyCoefficients; // table of coefficients generated by COSY
	private final int[][] cosyExponents; // table of term powers generated by COSY
	private final Particle ion; // either D or P, but probably D

	private final double energyFactor; // conversion factor between neutron and ion energies []
	private final double probHitsFoil; // probability that the neutron goes through the foil

	private final DiscreteFunction distanceVsEnergy; // stopping distance info
	private final DiscreteFunction energyVsDistance; // inverse stopping distance info
	private final DiscreteFunction energyVsPosition; // map between location on detector and energy going into lens


	/**
	 * put together the ion optic simulacion
	 * @param ion either Particle.P or Particle.D
	 * @param foilDistance the distance from TCC to the foil [m]
	 * @param foilWidth the total width of the foil [m]
	 * @param foilHeight the total hite of the foil [m]
	 * @param foilThickness the thickness of the foil [m]
	 * @param apertureDistance the distance from TCC to the aperture [m]
	 * @param apertureWidth the width of the aperture [m]
	 * @param apertureHeight the hite of the aperture [m]
	 * @param minimumEnergy the loest neutron energy to bother simulating [MeV]
	 * @param maximumEnergy the hiest neutron energy to bother simulating [MeV]
	 * @param referenceEnergy central neutron energy used in COSY calculation [MeV]
	 * @param cosyCoefficients the COSY coefficient matrix
	 * @param cosyExponents the corresponding COSY power lists
	 * @param focalTilt angle of the focal plane (0 means untilted) [deg]
	 * @throws IOException if it can't find the stopping power file
	 * @throws NumberFormatException if the stopping power file accepts bribes
	 */
	public IonOptics(
			Particle ion,
			double foilDistance, double foilWidth, double foilHeight, double foilThickness,
	        double apertureDistance, double apertureWidth, double apertureHeight,
	        double minimumEnergy, double maximumEnergy, double referenceEnergy,
	        double[][] cosyCoefficients, int[][] cosyExponents,
	        double focalTilt) throws IOException {

		this.ion = ion;
		double A = ion.mass/Particle.N.mass;
		this.energyFactor = 4*A/Math.pow(A + 1, 2);

		this.foilDistance = foilDistance;
		this.foilWidth = foilWidth;
		this.foilHeight = foilHeight;
		this.foilThickness = foilThickness;
		this.apertureDistance = apertureDistance;
		this.apertureWidth = apertureWidth;
		this.apertureHeight = apertureHeight;
		this.cosyKmin = energyFactor*minimumEnergy*MeV;
		this.cosyKmax = energyFactor*maximumEnergy*MeV;
		this.cosyK0 = energyFactor*referenceEnergy*MeV; // save this in a more useful unit
		this.cosyV0 = Math.sqrt(2*cosyK0/ion.mass); // and get the corresponding speed
		double γ = Math.pow(1 - Math.pow(cosyV0/SPEED_OF_LIGHT, 2), -1/2.);
		double L = (1 + γ)/γ*2*cosyCoefficients[5][4]; // here's a fun shortcut to estimating the length of the lens: first order analysis
		this.cosyT0 = L/cosyV0; // and corresponding time
		this.cosyT1 = -(1+γ)/γ/cosyV0; // and why is time measured in units of distance?
		this.focalPlaneAngle = Math.toRadians(focalTilt);
		this.cosyCoefficients = cosyCoefficients;
		this.cosyExponents = cosyExponents;

		this.probHitsFoil = foilWidth*foilHeight/(4*Math.PI*foilDistance*foilDistance);

		double[][] stoppingData = CSV.read(
				new File(String.format(STOPPING_POWER_FILENAME, ion.name())),
				',');
		for (int i = 0; i < stoppingData.length; i ++) {
			stoppingData[i][1] = 1/(stoppingData[i][1]*keV/μm); // converting from [keV/μm]
			stoppingData[i][0] = stoppingData[i][0]*keV; // and from [keV]
		}
		DiscreteFunction distanceVsEnergyRaw = new DiscreteFunction(stoppingData, true).antiderivative(); // integrate the stopping power to get stopping distance
		this.distanceVsEnergy = distanceVsEnergyRaw.indexed(STOPPING_DISTANCE_RESOLUTION); // m(J)
		this.energyVsDistance = distanceVsEnergyRaw.inv().indexed(STOPPING_DISTANCE_RESOLUTION); // J(m)

		double[] calibEnergies = new double[2*TIME_CORRECTION_RESOLUTION];
		double[] detectorPosition = new double[calibEnergies.length];
		for (int i = 0; i < calibEnergies.length; i ++) {
			calibEnergies[i] = (MIN_E + (MAX_E - MIN_E)*i/(calibEnergies.length-1))*energyFactor*MeV;
			double[] v = {0, 0, Math.sqrt(2*calibEnergies[i]/ion.mass)};
			double[] r = computeFocusedPosition(new double[] {0,0,0}, v, 0);
			detectorPosition[i] = r[x]/Math.cos(focalPlaneAngle);
		}
		this.energyVsPosition = new NumericalMethods.DiscreteFunction(calibEnergies, detectorPosition).inv()
				.indexed(TIME_CORRECTION_RESOLUTION); // J(m)
	}

	/**
	 * compute the probability that a given neutron released at this energy will spawn an ion
	 * and knock that ion through the aperture.
	 * @param energy energy of the released particles [eV]
	 * @return the fraction of particles that are worth simulating
	 */
	public double efficiency(double energy) {
		double n = 0.08e2; // I'm not sure what units this has or whence it came
		double dσdΩ = 4.3228e3/Math.sqrt(energy) - 0.6523; // same with these ones
		double dΩ = apertureWidth*apertureHeight / Math.pow(apertureDistance - foilDistance, 2);
		return probHitsFoil * n*dσdΩ*dΩ*foilThickness; // assume the foil is thin so we don't have to worry about multiple collisions
	}

	/**
	 * simulate a single random neutron emitted from TCC at the given energy and determine the
	 * position and time at which its child ion crosses the focal plane, time corrected, and
	 * the back-calculated energy.
	 * @param energy initial energy of released neutron [eV].
	 * @param time initial time of released neutron [s].
	 * @return { energy, time } [eV, s].
	 */
	public double[] simulate(double energy, double time) {
		double[] rCollision = chooseCollisionPosition();

		double[] rAperture = chooseAperturePosition();

		double[] vFinal = computeFinalVelocity(energy, rCollision, rAperture);

		double[] rFocal = computeFocusedPosition(rCollision, vFinal, time);

		return backCalculate(rFocal[x]/Math.cos(focalPlaneAngle), rFocal[3]);
	}

	/**
	 * estimate the original time and energy of this ion's neutron without looking at its actual
	 * time and energy, by guessing its energy and accounting for travel time.
	 * @param position the position where it hits the focal plane [m]
	 * @param time the time at which it hits the focal plane [s]
	 * @return { energy, time } [eV, s].
	 */
	private double[] backCalculate(double position, double time) {
		double focusingDistance = position*Math.sin(focalPlaneAngle);
		double E = energyVsPosition.evaluate(position); // [J]
		double t;
		double v = Math.sqrt(2*E/ion.mass);
		double d0 = (E - cosyK0)/cosyK0;
		double lf = cosyPolynomial(4, new double[] {0, 0, 0, 0, 0, d0}); // re-use the COSY mapping to estimate the time of flight from energy
		t = time - (cosyT0 + lf*cosyT1 + focusingDistance/v);
		return new double[] { E/energyFactor/eV, t };
	}

	/**
	 * choose a random location in the foil for the neutron to collide.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseCollisionPosition() {
		double xF = foilWidth/2*(2*Analysis.RANDOM.nextDouble()-1);
		double yF = foilHeight/2*(2*Analysis.RANDOM.nextDouble()-1);
		double zF = foilDistance + foilThickness/2*(2*Analysis.RANDOM.nextDouble()-1); // assume foil is thin, so every z coordinate is equally likely
		return new double[] { xF, yF, zF };
	}

	/**
	 * choose a random location in the aperture plane for the deuteron to pass through.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseAperturePosition() {
		double xA = (2*Analysis.RANDOM.nextDouble()-1)*apertureWidth/2; // assume aperture is far away, so every point in it is equally likely to be hit
		double yA = (2*Analysis.RANDOM.nextDouble()-1)*apertureHeight/2;
		double zA = apertureDistance;
		return new double[] { xA, yA, zA };
	}

	/**
	 * compute the velocity with which the deuteron passes through the aperture.
	 * @param energy the energy of the initial particle [eV]
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param rAperture {x,y,z} of the point where the deuteron passes through the aperture [m].
	 * @return { vx, vy, vz } [m/s]
	 */
	private double[] computeFinalVelocity(
			double energy, double[] rFoil, double[] rAperture) {
		double E0 = energy*eV; // convert energy from [eV] to [J]

		double[] nHat = { // get the unit vector in the direction of the neutron
				rFoil[x], rFoil[y], rFoil[z] };
		double norm = Math.sqrt(NumericalMethods.sqr(nHat));
		for (int i = 0; i < 3; i ++)
			nHat[i] /= norm;

		double[] dHat = { // and the unit vector in the direction of the ion
				rAperture[x] - rFoil[x], rAperture[y] - rFoil[y], rAperture[z] - rFoil[z] };
		norm = Math.sqrt(NumericalMethods.sqr(dHat));
		for (int i = 0; i < 3; i ++)
			dHat[i] /= norm;

		double cosθ = nHat[x]*dHat[x] + nHat[y]*dHat[y] + nHat[z]*dHat[z];
		double E1 = energyFactor*E0*cosθ*cosθ; // assume elastic collision between neutron and ion
		double distance = (foilDistance + foilThickness/2 - rFoil[z])/dHat[z];
		E1 = energyVsDistance.evaluate(distanceVsEnergy.evaluate(E1) - distance); // lose some energy by dragging through the foil

		if (E1 < cosyKmin || E1 > cosyKmax) {
			return new double[] { Double.NaN, Double.NaN, Double.NaN }; // some won't make it through the "energy aperture"
		}
		else {
			double v = Math.sqrt(2*E1/ion.mass); // get the resulting velocity otherwise
			return new double[] { v*dHat[x], v*dHat[y], v*dHat[z] };
		}
	}

	/**
	 * evaluate the mapping provided by COSY to obtain the time and position and velocity at
	 * which the ion passes the back reference plane.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param vInit {vx,vy,vz} of the deuteron as it exits the foil [m/s]
	 * @param tNeutron the time at which the neutron was released [s].
	 * @return { x, y, z, t } at which it strikes the focal plane [m, m, s]
	 */
	private double[] computeFocusedPosition(double[] rFoil, double[] vInit, double tNeutron) {
		if (Double.isNaN(vInit[0]))
			return new double[] { Double.NaN, Double.NaN, Double.NaN, Double.NaN };

		double x0 = rFoil[x], y0 = rFoil[y]; // COSY takes spatial coordinates in [m] (assume foil is thin so we can ignore rFoil[2])
		double a0 = vInit[x]/cosyV0, b0 = vInit[y]/cosyV0; // angular coordinates in [rad] (more or less)
		double t0 = 0; // assume time it takes neutron to hit foil is negligible
		double K0 = 1/2.*ion.mass*NumericalMethods.sqr(vInit); // for the 'd' coordinate, we must convert velocity to energy
		double d0 = (K0 - cosyK0)/cosyK0; // and then compare that to an expected reference energy
		double[] input = { x0, a0, y0, b0, t0, d0 };
		double[] output = new double[5];
		for (int i = 0; i < output.length; i ++) // the polynomial is pretty simple to compute
			output[i] = cosyPolynomial(i, input);
		double[] rPlane = { output[0], output[2], 0 }; // [m]
		double[] vFinal = { output[1]*cosyV0, output[3]*cosyV0, vInit[z] }; // [m/s]
		double tPlane = tNeutron + cosyT0 + output[4]*cosyT1;

		double tFocusing = rPlane[x] / (vFinal[z]/Math.tan(focalPlaneAngle) - vFinal[x]); // finally, account for the additional t that it takes to strike the focal plane
		double[] rFocused = {
				rPlane[x] + tFocusing*vFinal[x],
				rPlane[y] + tFocusing*vFinal[y],
				rPlane[z] + tFocusing*vFinal[z] };

		return new double[] { rFocused[x], rFocused[y], rFocused[z], tPlane + tFocusing };
	}

	/**
	 * evaluate a single polynomial from that table of coefficients.
	 * @param i the index of the parameter to compute
	 * @param input the initial values to use
	 * @return the final value of parameter i
	 */
	private double cosyPolynomial(int i, double[] input) {
		double output = 0;
		for (int j = 0; j < cosyCoefficients.length; j ++) {
			double term = cosyCoefficients[j][i];
			for (int k = 0; k < input.length; k ++) {
				term *= Math.pow(input[k], cosyExponents[j][k]);
			}
			output += term;
		}
		return output;
	}


}
