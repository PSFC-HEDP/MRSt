/**
 * MIT License
 * 
 * Copyright (c) 2018 Justin Kunimune
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package main;

import java.util.Locale;
import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;
import main.NumericalMethods.DiscreteFunction;
import main.NumericalMethods.Quantity;

/**
 * the class where all the math is.
 * 
 * @author Justin Kunimune
 */
public class MRSt {
	
	private static final int x = 0, y = 1, z = 2;
	
	private static final double SPEED_OF_LIGHT = 2.99792458e8;
	private static final double[][] SIGMA_COEFFICIENTS = {
			{}, {},
			{51.6e-31, 52.5e-31, 59.5e-31, -17.4e-31, 20.8e-31, -14.8e-31, 7.73e-31, -4.92e-31, 3.11e-31},
			{79.2e-31, 116e-31, 118e-31, 14.8e-31, 14.8e-31},
	}; // m^2/sr
	private static final DiscreteFunction ALPHA_KNOCKON_SPECTRUM = new DiscreteFunction(
			new double[] {10.23, 10.5, 11.0, 11.25, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5,
					15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 19.85},
			new double[] {1.62E-06, 4.87E-06, 3.71E-05, 8.85E-05, 0.00024044, 0.0019635, 0.016034, 0.097, 0.17674, 0.21588, 0.21588,
					0.17674, 0.071859, 0.019584, 0.0056109, 0.00169, 0.00046811, 0.00014583, 4.26E-05, 1.28E-05, 3.68E-06, 1.62E-06});
	
	private static final int STOPPING_DISTANCE_RESOLUTION = 64;
	private static final double MIN_E = 12, MAX_E = 16; // histogram bounds [MeV]
	private static final double MIN_T = 16.0, MAX_T = 16.5; // histogram bounds [ns]
	private static final double E_RESOLUTION = .09, T_RESOLUTION = 20e-3; // resolutions [MeV], [ns]
//	private static final double E_RESOLUTION = .3, T_RESOLUTION = 40e-3;
	private static final int TRANSFER_MATRIX_TRIES = 10000; // the number of points to sample in each column of the transfer matrix
	
	private final double foilDistance; // z coordinate of midplane of foil [m]
	private final double foilThickness; // thickness of foil [m]
	private final double apertureDistance; // distance from TCC to aperture [m]
	private final double apertureWidth; // horizontal dimension of aperture [m]
	private final double apertureHeight; // vertical dimension of aperture [m]
	private final double cosyKmin, cosyKmax; // bounds on deuterons that will be detected by the CSI
	private final double cosyK0, cosyV0, cosyT0, cosyT1; // reference coordinates for beam used by COSY [J], [m/s], [s], [s?]
	private final double focalPlaneAngle; // angle of focal plane [rad]
	private final double[][] cosyCoefficients; // table of coefficients generated by COSY
	private final int[][] cosyExponents; // table of term powers generated by COSY
	private final Particle ion; // either D or P, but probably D
	
	private final double energyFactor; // conversion factor between neutron and ion energies []
	private final double probHitsFoil; // probability that the neutron goes through the foil
	
	private final DiscreteFunction distanceVsEnergy; // stopping distance info
	private final DiscreteFunction energyVsDistance; // inverse stopping distance info
	private final DiscreteFunction energyVsPosition; // map between location on detector and energy going into lens
	
	private final double[] energyBins; // endpoints of E bins for inferred spectrum [MeV]
	private final double[] timeBins; // endpoints of time bins for inferred spectrum [ns]
	private final double[][] transferMatrix; // the full nmx2nm transfer matrix plus smoothing rows
	private final double[][] efficiency; // the fraction of neutrons in this bin that will be detected
	private double[][] deuteronSpectrum; // time-corrected deuteron counts
	private double[][] fitNeutronSpectrum; // backward-fit neutron counts
	private double[][] fitDeuteronSpectrum; // backward-fit deuteron counts (this should be similar to deuteronSpectrum)
	
	private final double timeStep;
	private final double[] timeAxis; // 1D vectors for higher level measurements [ns]
	private Quantity[][] measurements; // yield, ion temperature, electron temperature, velocity, areal density, and P2 asymmetry
	private double[][] covarianceMatrix; // and covariances that go with all of these
	
	private final Logger logger; // for logging
	
	/**
	 * perform some preliminary calculations for the provided configuration.
	 * @param stoppingPower a double[][] containing two columns and n rows. the zeroth column is
	 * the reference values of E in [keV] and the last column is the corresponding values of
	 * dE/dx in [keV/μm].
	 * @param focalTilt angle of the focal plane (0 means untilted) [deg]
	 * @param referenceEnergy minimum ion energy allowed in COSY calculation [eV]
	 * @param referenceEnergy maximum ion energy allowed in COSY calculation [eV]
	 * @param referenceEnergy expected ion energy used in COSY calculation [eV]
	 */
	public MRSt(
			Particle ion, double foilDistance, double foilRadius, double foilThickness,
			double[][] stoppingPowerData,
			double apertureDistance, double apertureWidth, double apertureHeight,
			double minimumEnergy, double maximumEnergy, double referenceEnergy,
			double[][] cosyCoefficients, int[][] cosyExponents,
			double focalTilt, Logger logger) {
		this.foilDistance = foilDistance;
		this.foilThickness = foilThickness;
		this.apertureDistance = apertureDistance;
		this.apertureWidth = apertureWidth;
		this.apertureHeight = apertureHeight;
		this.cosyKmin = minimumEnergy*(-Particle.E.charge);
		this.cosyKmax = maximumEnergy*(-Particle.E.charge);
		this.cosyK0 = referenceEnergy*(-Particle.E.charge); // save this in a more useful unit
		this.cosyV0 = Math.sqrt(2*cosyK0/ion.mass); // and get the corresponding speed
		double γ = Math.pow(1 - Math.pow(cosyV0/SPEED_OF_LIGHT, 2), -1/2.);
		double L = (1 + γ)/γ*2*cosyCoefficients[5][4]; // here's a fun shortcut to estimating the length of the lens: first order analysis
		this.cosyT0 = L/cosyV0; // and corresponding time
		this.cosyT1 = -(1+γ)/γ/cosyV0; // and why is time measured in units of distance?
		this.focalPlaneAngle = Math.toRadians(focalTilt);
		this.cosyCoefficients = cosyCoefficients;
		this.cosyExponents = cosyExponents;
		this.ion = ion;
		
		double A = ion.mass/Particle.N.mass;
		this.energyFactor = 4*A/Math.pow(A + 1, 2);
		
		double foilMaxAngle = Math.atan(foilRadius/foilDistance);
		this.probHitsFoil = (1 - Math.cos(foilMaxAngle))/2;
		
		double[] dxdE = new double[stoppingPowerData.length]; // integrate the stopping power to get stopping distance
		double[] E = new double[stoppingPowerData.length];
		for (int i = 0; i < stoppingPowerData.length; i ++) {
			dxdE[i] = 1/(stoppingPowerData[i][1]*1e9*(-Particle.E.charge)); // converting from [GeV/m] to [m/J]
			E[i] = stoppingPowerData[i][0]*1e3*(-Particle.E.charge); // and from [keV] to [J]
		}
		DiscreteFunction distanceVsEnergyRaw = new DiscreteFunction(E, dxdE).antiderivative();
		this.distanceVsEnergy = distanceVsEnergyRaw.indexed(STOPPING_DISTANCE_RESOLUTION); // m(J)
		this.energyVsDistance = distanceVsEnergyRaw.inv().indexed(STOPPING_DISTANCE_RESOLUTION); // J(m)
		
		this.energyBins = new double[(int) ((MAX_E - MIN_E)/E_RESOLUTION + 1)];
		for (int i = 0; i < energyBins.length; i ++)
			this.energyBins[i] = (MIN_E + i*(MAX_E - MIN_E)/(energyBins.length-1));
		this.timeBins = new double[(int) ((MAX_T - MIN_T)/T_RESOLUTION + 1)];
		for (int i = 0; i < timeBins.length; i ++)
			this.timeBins[i] = MIN_T + i*(MAX_T - MIN_T)/(timeBins.length-1);
		
		this.timeStep = timeBins[1] - timeBins[0];
		this.timeAxis = new double[timeBins.length-1];
		for (int i = 0; i < timeBins.length-1; i ++)
			this.timeAxis[i] = (this.timeBins[i] + this.timeBins[i+1])/2;
		
		double[] calibEnergies = new double[2*energyBins.length];
		double[] detectorPosition = new double[calibEnergies.length];
		for (int i = 0; i < calibEnergies.length; i ++) {
			calibEnergies[i] = (MIN_E + (MAX_E - MIN_E)*i/(calibEnergies.length-1))*energyFactor*1e6*(-Particle.E.charge);
			double[] v = {0, 0, Math.sqrt(2*calibEnergies[i]/ion.mass)};
			double[] r = computeFocusedPosition(new double[] {0,0,0}, v, 0);
			detectorPosition[i] = r[x]/Math.cos(focalPlaneAngle);
		}
		this.energyVsPosition = new DiscreteFunction(calibEnergies, detectorPosition).inv()
				.indexed(energyBins.length); // J(m)
		
		this.logger = logger;
		
		this.transferMatrix = evaluateTransferMatrix();
		this.efficiency = new double[energyBins.length-1][timeBins.length-1];
		for (int i = 0; i < energyBins.length-1; i ++)
			for (int j = 0; j < timeBins.length-1; j ++)
				for (int k = 0; k < energyBins.length-1; k ++)
					for (int l = 0; l < timeBins.length-1; l ++)
						efficiency[i][j] += this.transferMatrix[(timeBins.length-1)*k+l][(timeBins.length-1)*i+j];
	}
	
	/**
	 * compute the probability that a given neutron released at this energy will spawn an ion
	 * and knock that ion through the aperture.
	 * @param energy energy of the released particles [eV]
	 * @return the fraction of particles that are worth simulating
	 */
	public double efficiency(double energy) {
		double n = 0.08e2; // I'm not sure what units this has or whence it came
		double dσdΩ = 4.3228e3/Math.sqrt(energy) - 0.6523; // same with these ones
		double dΩ = apertureWidth*apertureHeight / Math.pow(apertureDistance - foilDistance, 2);
		double l = foilThickness; // assume the foil is thin so we don't have to worry about multiple collisions
		return probHitsFoil * n*dσdΩ*dΩ*l;
	}
	
	/**
	 * determine the response of the MRSt to neutrons at particular energies. also tack on some
	 * finite difference laplacian roughness measures.
	 * @return the matrix that multiplies from a real neutron spectrum to a measured deuteron
	 *   spectrum concatenate with roughness, both flattened out.
	 */
	public double[][] evaluateTransferMatrix() {
		if (logger != null)  logger.info("beginning Monte Carlo computation.");
		int simulationCount = 0;
		long startTime = System.currentTimeMillis();
		
		int n = (energyBins.length-1)*(timeBins.length-1);
		double[][] matrix = new double[n][n];
		int j0 = timeBins.length/2; // time symmetry means we only need to evaluate at one time
		for (int i = 0; i < energyBins.length-1; i ++) { // sweep through all energies
			double energy0 = energyBins[i]*1e6, energy1 = energyBins[i+1]*1e6; // [eV]
			double time0 = timeBins[j0]*1e-9, time1 = timeBins[j0+1]*1e-9; // [s]
			double weight = efficiency((energy0 + energy1)/2)/TRANSFER_MATRIX_TRIES;
			for (int k = 0; k < TRANSFER_MATRIX_TRIES; k ++) {
				double energy = energy0 + Math.random()*(energy1 - energy0); // randomly choose values from the bin
				double time = time0 + Math.random()*(time1 - time0); // [s]
				
				double[] xt = this.simulate(energy, time); // do the simulation!
				simulationCount ++;
				
				if (Double.isNaN(xt[0]))	continue; // sometimes, they won't hit the CSI. That's fine.
				double[] et = this.backCalculate(xt[0], xt[1]); // otherwise do the stretch/compress time correction
				
				double e = et[0]/(-Particle.E.charge)/1e6, t = et[1]/1e-9; // then convert to the same units as the bins
//				e = energy/1e6; t = time/1e-9;
				int eBin = (int)((e - MIN_E)/(MAX_E - MIN_E)*(energyBins.length-1));
				int tBin = (int)((t - MIN_T)/(MAX_T - MIN_T)*(timeBins.length-1));
				if (eBin >= 0 && eBin < energyBins.length-1 && tBin >= 0 && tBin < timeBins.length-1) // if it falls in detectable bounds
					matrix[(timeBins.length-1)*eBin + tBin][(timeBins.length-1)*i + j0] += weight; // add it to the row
			}
		}
		
		long endTime = System.currentTimeMillis();
		if (logger != null)
			logger.info(String.format(Locale.US, "completed %d simulations in %.2f minutes.",
					simulationCount, (endTime - startTime)/60000.));
		
		for (int i = 0; i < n; i ++) { // now iterate through all of the rows
			for (int j = 0; j < n; j ++) { // and all of the columns, of which we still don't have many
				int jRef = j/(timeBins.length-1)*(timeBins.length-1) + j0; // look for the nearest column that is filled
				int iRef = i - j + jRef; // [i,j] is equivalent to an [iRef,jRef] by time symmetry
				if (iRef >= 0 && i/(timeBins.length-1) == iRef/(timeBins.length-1)) // this may have jumped over to the next energy,
					matrix[i][j] = matrix[iRef][jRef];
				else
					matrix[i][j] = 0; // but if so, it's almost certainly 0
			}
		}
		
		return matrix;
	}

	/**
	 * compute the total response to an implosion with the given neutron spectrum and save and
	 * analyze it.
	 * @param energies the energies that describe the rows of counts [MeV]
	 * @param times the times that describe the columns of counts [ns]
	 * @param spectrum the time- and energy- resolved neutron spectrum in number of neutrons. each
	 * row corresponds to one element of energies, and each column one element of times. [#/MeV/ns]
	 * @param errorBars whether to bother computing error bars
	 * @return {computation time, BT, peak-ρR, peak-ρR-ramp, Ti(BT), ρR(BT), vi(BT),
	 *   Ti-ramp(BT), ρR-ramp(BT), vi-ramp(BT), max ρR, yield, μ1, μ2, μ3}, where each item is
	 *   a value followed by its estimated error
	 */
	public double[] respond(double[] energies, double[] times, double[][] spectrum, boolean errorBars) {
		this.deuteronSpectrum = this.response(energies, times, spectrum, true);
		Quantity[] values = analyze(deuteronSpectrum, errorBars);
		double[] output = new double[2*values.length];
		for (int i = 0; i < values.length; i ++) {
			output[2*i+0] = values[i].value;
			output[2*i+1] = Math.sqrt(values[i].variance(covarianceMatrix));
		}
		return output;
	}
	
	/**
	 * compute the total response to an implosion with the given neutron spectrum using the
	 * precomputed transfer matrix. account for electrostatic time correction, but not for any
	 * analysis.
	 * @param energies the edges of the energy bins
	 * @param times the edges of the time bins
	 * @param inSpectrum the neutron counts in each bin
	 * @param stochastic whether to add noise to mimic real data
	 * @return the counts in the measured spectrum bins
	 */
	public double[][] response(double[] inEBins, double[] inTBins, double[][] inSpectrum,
			boolean stochastic) {
		if (inSpectrum.length != inEBins.length-1 || inSpectrum[0].length != inTBins.length-1)
			throw new IllegalArgumentException("These dimensions don't make any sense.");
		
		double[][] sizedSpectrum = NumericalMethods.downsample(
				inTBins, inEBins, inSpectrum, this.timeBins, this.energyBins);
		
		double[] u = new double[(energyBins.length-1)*(timeBins.length-1)];
		for (int i = 0; i < energyBins.length-1; i ++)
			for (int j = 0; j < timeBins.length-1; j ++)
				u[(timeBins.length-1)*i + j] = sizedSpectrum[i][j]; // now flatten the spectrum
		
		double[] v = NumericalMethods.matmul(transferMatrix, u); // then do the multiplication
		
		double[][] outSpectrum = new double[energyBins.length-1][timeBins.length-1];
		for (int i = 0; i < energyBins.length-1; i ++)
			for (int j = 0; j < timeBins.length-1; j ++)
				outSpectrum[i][j] = v[(timeBins.length-1)*i + j]; // finally, unflatten. inflate. rounden.
		
		if (stochastic) { // to simulate stochasticity
			for (int i = 0; i < energyBins.length-1; i ++)
				for (int j = 0; j < timeBins.length-1; j ++)
					outSpectrum[i][j] = NumericalMethods.poisson(outSpectrum[i][j]); // just jitter every cell
		}
		
		return outSpectrum;
	}
	
	/**
	 * take the time-corrected spectrum and use it to compute and store time-resolved values
	 * for ion temperature, areal density, and yield.
	 * @param spectrum the time-corrected spectrum we want to understand
	 * @param errorBars should error bars be computed (it's rather intensive)?
	 * @return {computation time, BT, peak-ρR, peak-ρR-ramp, Ti(BT), ρR(BT), vi(BT),
	 *   Ti-ramp(BT), ρR-ramp(BT), vi-ramp(BT), max ρR, yield, μ1, μ2, μ3} or null if it can't even
	 */
	private Quantity[] analyze(double[][] spectrum, boolean errorBars) {
		if (spectrum.length != energyBins.length-1 || spectrum[0].length != timeBins.length-1)
			throw new IllegalArgumentException("These dimensions are wrong.");
		
		double[][] F = spectrum;
		
		if (NumericalMethods.max(spectrum) == 0) {
			logger.log(Level.SEVERE, "The deuteron spectrum is empty.");
			return null;
		}
		
		double[][] D = new double[energyBins.length-1][timeBins.length-1];
		for (int i = 0; i < energyBins.length-1; i ++)
			for (int j = 0; j < timeBins.length-1; j ++)
				D[i][j] = Math.max(1, spectrum[i][j]);
		
		if (logger != null)  logger.info("beginning fit process.");
		long startTime = System.currentTimeMillis();
		
		double gelf[][] = Optimization.optimizeGelfgat(F, D, this.transferMatrix);
		
		double[] opt = new double[6*timeAxis.length]; // initial guess for the coming Powell fit
		for (int j = 0; j < timeAxis.length; j ++) {
			double Δt = timeBins[j+1] - timeBins[j];
			double[] exp = new double[energyBins.length-1];
			for (int i = 3; i < energyBins.length-1; i ++) // I'm not sure why the bottom few rows are so unusable
				exp[i] = gelf[i][j]/Δt;
			
			double[] fit = Optimization.minimizeNelderMead((x) -> {
				if (x[0] < 0 || x[1] <= 1 || x[2] < 0 || Math.abs(x[3]) > 200 || x[4] < 0)
					return Double.POSITIVE_INFINITY;
				double[] teo = generateSpectrum(x[0], x[1], x[2], x[3], x[4], 0, energyBins);
				double error = 0;
				for (int i = 3; i < energyBins.length-1; i ++)
					error += Math.pow(teo[i] - exp[i], 2);
				return error;
			}, new double[] {Math.max(1/efficiency[2][j], NumericalMethods.sum(exp)/1e15), 4, 0, 50, 1}, 1e-8);
			
			System.arraycopy(fit, 0, opt, 6*j, 5);
		}
		
		double spectrumScale = NumericalMethods.sum(gelf)/(timeBins.length-1)/(energyBins.length-1); // the characteristic magnitude of the neutron spectrum bins
		double s0 = 0, s1 = 0, s2 = 0;
		for (int i = 3; i < energyBins.length-1; i ++) {
			for (int j = 0; j < timeBins.length-1; j ++) {
				s0 += gelf[i][j];
				s1 += gelf[i][j]*timeAxis[j];
				s2 += gelf[i][j]*timeAxis[j]*timeAxis[j];
			}
		}
		double expectedStd = Math.sqrt(s2/s0 - s1*s1/s0/s0); // the expected standard deviation of the burn in time
		
		Function<double[], Double> logPosterior = (double[] x) -> {
			double[][] params = new double[6][timeAxis.length];
			for (int k = 0; k < params.length; k ++) // first unpack the state vector
				for (int i = 0; i < params[k].length; i ++)
					params[k][i] = x[6*i+k];
			
			for (int i = 0; i < timeAxis.length; i ++) { // check for illegal (prior = 0) values
				if (params[0][i] < 0)  return Double.NEGATIVE_INFINITY;
				if (params[1][i] <= 0 || params[1][i] > 20)  return Double.NEGATIVE_INFINITY;
				if (params[2][i] <= 0 || params[2][i] > 20)  return Double.NEGATIVE_INFINITY;
				if (Math.abs(params[3][i]) > 200)  return Double.NEGATIVE_INFINITY;
				if (params[4][i] < 0 || params[4][i] > 4)  return Double.NEGATIVE_INFINITY;
				if (Math.abs(params[5][i]) >= 1)  return Double.NEGATIVE_INFINITY;
			}
			
			double[][] teoSpectrum = generateSpectrum(
					params[0], params[1], params[2], params[3], params[4], params[5],
					energyBins, timeBins); // generate the neutron spectrum based on those
			double[][] fitSpectrum = this.response(
					energyBins, timeBins, teoSpectrum, false); // blur it according to the transfer matrix
			
			double error = 0; // negative Bayes factor (in nepers)
			for (int i = 0; i < spectrum.length; i ++) {
				for (int j = 0; j < spectrum[i].length; j ++) { // compute the error between it and the actual spectrum
					if (fitSpectrum[i][j] > 0)
						error += fitSpectrum[i][j] - spectrum[i][j]*Math.log(fitSpectrum[i][j]);
					else if (fitSpectrum[i][j] == 0 && spectrum[i][j] > 0)
						error += Double.POSITIVE_INFINITY; // throwing infinity if we expect 0 and got not 0
					else if (fitSpectrum[i][j] == 0 && spectrum[i][j] == 0)
						error += 0; // skipping places where we expect 0 and got 0
					else
						throw new IllegalArgumentException("What to do when expected "+fitSpectrum[i][j]+" and observed "+spectrum[i][j]+"?");
				}
			}
			
			double penalty = 0; // negative log of prior (ignoring global normalization)
			for (int j = 0; j < spectrum[0].length; j ++) {
				for (int i = 0; i < spectrum.length; i ++) {
					if (teoSpectrum[i][j] > 1e-20)
						penalty += 1e-2*efficiency[i][j]*teoSpectrum[i][j]*
								Math.log(teoSpectrum[i][j]/spectrumScale); // encourage entropy
				}
				
				penalty += params[1][j]/5 - Math.log(params[1][j]); // use gamma prior on temperatures
				penalty += params[2][j]/5 - Math.log(params[2][j]);
				penalty += Math.pow(params[3][j]/50, 2)/2; // gaussian prior on velocity
				penalty += params[4][j]/1; // exponential prior on areal density
				penalty += Math.pow(params[5][j]/.5, 2)/2; // and gaussian prior on asymmetry
			}
			
			double burn0 = 0, burn1 = 0;
			for (int j = 0; j < timeAxis.length; j ++) {
				burn0 += params[0][j];
				burn1 += params[0][j]*timeAxis[j];
			}
			double burn2 = 0, burn4 = 0;
			for (int j = 0; j < timeAxis.length; j ++) {
				burn2 = params[0][j]*Math.pow((timeAxis[j] - burn1/burn0)/(2*expectedStd), 2);
				burn4 = params[0][j]*Math.pow((timeAxis[j] - burn1/burn0)/(2*expectedStd), 4);
				penalty += 1e4/burn0*Math.max(burn4/burn0 - burn2/burn0, 0);
			}
			
			for (int j = 1; j < timeAxis.length-1; j ++) {
				double Tpp = (params[1][j-1] - 2*params[1][j] + params[1][j+1])/
						Math.pow(timeStep, 2);
				penalty += Math.pow(Tpp/5000, 2)/2; // encourage a smooth ion temperature
			}
			
			double burnDensity = 0;
			for (int j = 0; j < timeAxis.length; j ++)
				burnDensity += params[0][j]*params[4][j];
			burnDensity /= NumericalMethods.sum(params[0]);
			for (int j = 0; j < timeAxis.length; j ++)
				if (params[4][j] > 1e-20)
					penalty += 1e4*params[0][j]/burn0*params[4][j]/burnDensity*Math.log(params[4][j]/burnDensity); // and an entropic rho-R
			
			for (int j = 1; j < timeAxis.length-1; j ++) {
				double App = (params[5][j-1] - 2*params[5][j] + params[5][j+1])/
						Math.pow(timeStep, 2);
				penalty += Math.pow(App/1000, 2)/2; // encourage a smooth asymmetry history
			}
			
			return - penalty - error;
		};
		
		double meanYield = 0;
		for (int j = 0; j < timeAxis.length; j ++)
			meanYield += opt[6*j]/timeAxis.length;
		double[] dimensionScale = new double[6*timeAxis.length];
		for (int j = 0; j < timeAxis.length; j ++) {
			dimensionScale[6*j+0] = Math.max(opt[6*j]/3., meanYield);
			dimensionScale[6*j+1] = 10;
			dimensionScale[6*j+2] = 10;
			dimensionScale[6*j+3] = 100;
			dimensionScale[6*j+4] = 1;
			dimensionScale[6*j+5] = 1;
		}
		
		double oldPosterior = Double.NEGATIVE_INFINITY, newPosterior = logPosterior.apply(opt);
		if (newPosterior == Double.NEGATIVE_INFINITY) {
			for (int j = 0; j < timeAxis.length; j ++)
				opt[6*j] += 1;
			newPosterior = logPosterior.apply(opt);
		}
		System.out.println(newPosterior);
		MultivariateOptimizer optimizer = new PowellOptimizer(1e-14, 1);
		while (newPosterior - oldPosterior > .1) { // just optimize it over and over; you'll get there eventually
			opt = optimizer.optimize(
					GoalType.MAXIMIZE,
					new ObjectiveFunction((x) -> logPosterior.apply(x)),
					new InitialGuess(opt),
					new MultiDirectionalSimplex(dimensionScale),
					new MaxIter(10000),
					new MaxEval(100000)).getPoint();
			oldPosterior = newPosterior;
			newPosterior = logPosterior.apply(opt);
			System.out.println(newPosterior);
		}
		
		this.measurements = new Quantity[6][timeAxis.length]; // unpack the optimized vector
		for (int k = 0; k < measurements.length; k ++) {
			for (int j = 0; j < timeAxis.length; j ++) {
				double[] grad = new double[6*timeAxis.length];
				grad[6*j+k] = 1;
				measurements[k][j] = new Quantity(opt[6*j+k], grad);
			}
		}
		
		if (errorBars) {
			double c = logPosterior.apply(opt);
			double[][] hessian = new double[6*timeAxis.length][6*timeAxis.length];
			for (int i = 0; i < hessian.length; i ++) {
				double dxi = dimensionScale[i]*1e-4;
				opt[i] += dxi;
				double r = logPosterior.apply(opt);
				opt[i] -= 2*dxi;
				double l = logPosterior.apply(opt);
				opt[i] += dxi;
				if (Double.isInfinite(l)) { // if we are at a bound
					hessian[i][i] = -Math.pow((r - c)/dxi, 2); // approximate this exponential-ish distribution as gaussian
					for (int j = 0; j < i; j ++) {
						hessian[i][j] = hessian[j][i] = 0; // and reset any diagonal terms that previously involved this
					}
				}
				else {
					hessian[i][i] = (r - 2*c + l)/(dxi*dxi); // otherwise approximate it as gaussian
					for (int j = i+1; j < hessian[i].length; j ++) { // and get some diagonal terms
						double dxj = dimensionScale[j]*1e-4;
						opt[j] += dxj;
						double u = logPosterior.apply(opt);
						opt[i] += dxi;
						double ur = logPosterior.apply(opt);
						opt[i] -= dxi;
						opt[j] -= dxj;
						hessian[i][j] = hessian[j][i] = (ur - u - r + c)/(dxi*dxj);
					}
				}
			}
			for (int i = 0; i < hessian.length; i ++) {
				if (hessian[i][i] > 0) {
					hessian[i][i] = Double.POSITIVE_INFINITY;
				}
			}
			for (int i = 0; i < hessian.length; i ++) {
				for (int j = 0; j < hessian.length; j ++) {
					hessian[i][j] = hessian[j][i] = Math.signum(hessian[i][j])*
							Math.max(Math.abs(hessian[i][j]), 
									Math.sqrt(hessian[i][i]*hessian[j][j])); // enforce positive semidefiniteness
				}
			}
			
			covarianceMatrix = NumericalMethods.pseudoinv(hessian);
			for (int i = 0; i < hessian.length; i ++)
				for (int j = 0; j < hessian[i].length; j ++)
					covarianceMatrix[i][j] *= -1; // there's a negative sign between the inverse hessian and covariance
			for (int i = 0; i < hessian.length; i ++) {
				if (covarianceMatrix[i][i] < -1/hessian[i][i]) { // these are all approximations, and sometimes they violate the properties of positive semidefiniteness
					covarianceMatrix[i][i] = -1/hessian[i][i]; // do what you must to make it work
				}
			}
		}
		else {
			covarianceMatrix = new double[6*timeAxis.length][6*timeAxis.length];
		}
		
		long endTime = System.currentTimeMillis();
		if (logger != null)
			logger.info(String.format(Locale.US, "completed in %.2f minutes.",
					(endTime - startTime)/60000.));
		
		this.fitNeutronSpectrum = generateSpectrum( // and then interpret it
				getNeutronYield(), getIonTemperature(), getElectronTemperature(),
				getFlowVelocity(), getArealDensity(), getMode2Asymmetry(), energyBins, timeBins);
		this.fitDeuteronSpectrum = this.response(energyBins, timeBins, fitNeutronSpectrum, false);
		
		Quantity[] dTidt = NumericalMethods.derivative(timeAxis, measurements[1]); // now we can freely analyze the resulting profiles
		Quantity[] dρRdt = NumericalMethods.derivative(timeAxis, measurements[4]);
		Quantity[] dvidt = NumericalMethods.derivative(timeAxis, measurements[3]);
		
		Quantity iBT = NumericalMethods.quadargmax(measurements[0]); // index of max yield
		Quantity bangTime = NumericalMethods.interp(timeAxis, iBT); // time of max yield
		Quantity peakYield = NumericalMethods.interp(measurements[0], iBT);
		
		int left = (int)iBT.value;
		while (left-1 >= 0 && measurements[0][left-1].value > peakYield.value/1e3)
			left --;
		int rite = (int)iBT.value;
		while (rite < timeAxis.length && measurements[0][rite].value > peakYield.value/1e3)
			rite ++;
		Quantity iMC = NumericalMethods.quadargmax(left, rite, measurements[4]); // index of max compression
		Quantity maxCompress = NumericalMethods.interp(timeAxis, iMC); // time of max compression
		Quantity maxPRRamp = NumericalMethods.quadargmax(left, rite, timeAxis, dρRdt); // time of max rhoR ramp
		Quantity[] moments = new Quantity[5];
		for (int k = 0; k < moments.length; k ++)
			moments[k] = NumericalMethods.moment(k, timeBins, measurements[0]);
		
		Quantity[] res = {
				new Quantity((endTime - startTime)/1000., covarianceMatrix.length),
				bangTime, maxCompress, maxPRRamp,
				NumericalMethods.interp(measurements[1], iBT),
				NumericalMethods.interp(measurements[4], iBT),
				NumericalMethods.interp(measurements[3], iBT),
				NumericalMethods.interp(dTidt, iBT),
				NumericalMethods.interp(dρRdt, iBT),
				NumericalMethods.interp(dvidt, iBT),
				NumericalMethods.interp(measurements[4], iMC),
				moments[0].times(timeStep), moments[1],
				moments[2].sqrt().times(2.355), moments[3], moments[4],
		}; // collect the figures of merit
		
		if (logger != null) {
			logger.info(String.format("Bang time:         %s ns", res[1].toString(covarianceMatrix)));
			logger.info(String.format("Peak compression:  %s ns", res[2].toString(covarianceMatrix)));
			logger.info(String.format("            = BT + %s ps", res[2].minus(res[1]).over(1e-3).toString(covarianceMatrix)));
			logger.info(String.format("Max ρR ramp:       %s ps", res[3].toString(covarianceMatrix)));
			logger.info(String.format("            = BT + %s ps", res[3].minus(res[1]).over(1e-3).toString(covarianceMatrix)));
			logger.info(String.format("Ti at BT:          %s keV", res[4].toString(covarianceMatrix)));
			logger.info(String.format("\u03C1R at BT:          %s μm/ns", res[5].toString(covarianceMatrix)));
			logger.info(String.format("vi at BT:          %s μm/ns", res[6].toString(covarianceMatrix)));
			logger.info(String.format("dTi/dt at BT:      %s keV/ns", res[7].toString(covarianceMatrix)));
			logger.info(String.format("dρR/dt at BT:      %s g/cm^2/ns", res[8].toString(covarianceMatrix)));
			logger.info(String.format("dvi/dt at BT:      %s μm/ns^2", res[9].toString(covarianceMatrix)));
			logger.info(String.format("Peak ρR:           %s g/cm^2", res[10].toString(covarianceMatrix)));
			logger.info(String.format("Total yield (μ0):  %s", res[11].times(1e15).toString(covarianceMatrix)));
			logger.info(String.format("Burn mean (μ1):    %s ns", res[12].toString(covarianceMatrix)));
			logger.info(String.format("Burn width (μ2):   %s ps", res[13].over(1e-3).toString(covarianceMatrix)));
			logger.info(String.format("Burn skewness (μ3):%s", res[14].toString(covarianceMatrix)));
			logger.info(String.format("Burn kurtosis (μ4):%s", res[15].toString(covarianceMatrix)));
		}
		return res;
	}
	
	/**
	 * simulate a single random neutron emitted from TCC at the given energy and determine the
	 * position and time at which its child ion crosses the focal plane.
	 * @param energy initial energy of released neutron [eV].
	 * @param time initial time of released neutron [s].
	 * @return { signed hypot(x,z), t } [m, s].
	 */
	public double[] simulate(double energy, double time) {
		double[] rCollision = chooseCollisionPosition();
		
		double[] rAperture = chooseAperturePosition();
		
		double[] vFinal = computeFinalVelocity(energy, rCollision, rAperture);
		
		double[] rFocal = computeFocusedPosition(rCollision, vFinal, time);
		
		return new double[] { rFocal[x]/Math.cos(focalPlaneAngle), rFocal[3] };
	}
	
	/**
	 * estimate the original time and energy of this ion's neutron without looking at its actual
	 * time and energy, by guessing its energy and accounting for travel time.
	 * @param position the position where it hits the focal plane [m]
	 * @param time the time at which it hits the focal plane [s]
	 * @return { energy, time } [J, s].
	 */
	public double[] backCalculate(double position, double time) {
		double focusingDistance = position*Math.sin(focalPlaneAngle);
		double E = energyVsPosition.evaluate(position); // [J]
		double t;
		double v = Math.sqrt(2*E/ion.mass);
		double d0 = (E - cosyK0)/cosyK0;
		double lf = cosyPolynomial(4, new double[] {0, 0, 0, 0, 0, d0}); // re-use the COSY mapping to estimate the time of flight from energy
		t = time - (cosyT0 + lf*cosyT1 + focusingDistance/v);
		return new double[] { E/energyFactor, t };
	}
	
	/**
	 * choose a random location in the foil for the neutron to collide.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseCollisionPosition() {
		double θF = Math.acos(1 - 2*Math.random()*probHitsFoil);
		double rF = foilDistance*Math.tan(θF); // NOTE: original code assumes uniform distribution within foil; I account for nonzero solid angle subtended at TCC.
		double φF = Math.random()*2*Math.PI;
		double zF = foilDistance + (2*Math.random()-1)*foilThickness/2; // assume foil is thin, so every z coordinate is equally likely
		return new double[] { rF*Math.cos(φF), rF*Math.sin(φF), zF };
	}
	
	/**
	 * choose a random location in the aperture plane for the deuteron to pass through.
	 * @return { x, y, z } [m]
	 */
	private double[] chooseAperturePosition() {
		double xA = (2*Math.random()-1)*apertureWidth/2; // assume aperture is far away, so every point in it is equally likely to be hit
		double yA = (2*Math.random()-1)*apertureHeight/2;
		double zA = apertureDistance;
		return new double[] { xA, yA, zA };
	}
	
	/**
	 * compute the velocity with which the deuteron passes through the aperture.
	 * @param vInitial {vx,vy,vz} of the neutron as it enters the foil [m/s].
	 * @param A ratio of charged particle mass to neutron mass.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param rAperture {x,y,z} of the point where the deuteron passes through the aperture [m].
	 * @return { vx, vy, vz } [m/s]
	 */
	private double[] computeFinalVelocity(
			double energy, double[] rFoil, double[] rAperture) {
		double E0 = -Particle.E.charge*energy; // convert energy from [eV] to [J]
		
		double[] nHat = { // get the unit vector in the direction of the neutron
				rFoil[x], rFoil[y], rFoil[z] };
		double norm = Math.sqrt(sqr(nHat));
		for (int i = 0; i < 3; i ++)
			nHat[i] /= norm;
		
		double[] dHat = { // and the unit vector in the direction of the ion
				rAperture[x] - rFoil[x], rAperture[y] - rFoil[y], rAperture[z] - rFoil[z] };
		norm = Math.sqrt(sqr(dHat));
		for (int i = 0; i < 3; i ++)
			dHat[i] /= norm;
		
		double cosθ = nHat[x]*dHat[x] + nHat[y]*dHat[y] + nHat[z]*dHat[z];
		double E1 = energyFactor*E0*cosθ*cosθ; // assume elastic collision between neutron and ion
		double distance = (foilDistance + foilThickness/2 - rFoil[z])/dHat[z];
		E1 = energyVsDistance.evaluate(distanceVsEnergy.evaluate(E1) - distance); // lose some energy by dragging through the foil
		
//		System.out.print(E1/Particle.P.charge/1e6+", ");
		
		if (E1 < cosyKmin || E1 > cosyKmax) {
			return new double[] { Double.NaN, Double.NaN, Double.NaN }; // some won't make it through the "energy aperture"
		}
		else {
			double v = Math.sqrt(2*E1/ion.mass); // get the resulting velocity otherwise
			return new double[] { v*dHat[x], v*dHat[y], v*dHat[z] };
		}
	}
	
	/**
	 * evaluate the mapping provided by COSY to obtain the time and position and velocity at
	 * which the ion passes the back reference plane.
	 * @param rFoil {x,y,z} of the point at which the neutron strikes the deuteron [m].
	 * @param vInit {vx,vy,vz} of the deuteron as it exits the foil [m/s]
	 * @param tNeutron the time at which the neutron was released [s].
	 * @return { x, y, z, t } at which it strikes the focal plane [m, m, s]
	 */
	private double[] computeFocusedPosition(double[] rFoil, double[] vInit, double tNeutron) {
		if (Double.isNaN(vInit[0]))
			return new double[] { Double.NaN, Double.NaN, Double.NaN, Double.NaN };
		
		double x0 = rFoil[x], y0 = rFoil[y]; // COSY takes spatial coordinates in [m] (assume foil is thin so we can ignore rFoil[2])
		double a0 = vInit[x]/cosyV0, b0 = vInit[y]/cosyV0; // angular coordinates in [rad] (more or less)
		double t0 = 0; // assume time it takes neutron to hit foil is negligible
		double K0 = 1/2.*ion.mass*sqr(vInit); // for the 'd' coordinate, we must convert velocity to energy
		double d0 = (K0 - cosyK0)/cosyK0; // and then compare that to an expected reference energy
		double[] input = { x0, a0, y0, b0, t0, d0 };
		double[] output = new double[5];
		for (int i = 0; i < output.length; i ++) // the polynomial is pretty simple to compute
			output[i] = cosyPolynomial(i, input);
		double[] rPlane = { output[0], output[2], 0 }; // [m]
		double[] vFinal = { output[1]*cosyV0, output[3]*cosyV0, vInit[z] }; // [m/s]
		double tPlane = tNeutron + cosyT0 + output[4]*cosyT1;
		
		double tFocusing = rPlane[x] / (vFinal[z]/Math.tan(focalPlaneAngle) - vFinal[x]); // finally, account for the additional t that it takes to strike the focal plane
		double[] rFocused = {
				rPlane[x] + tFocusing*vFinal[x],
				rPlane[y] + tFocusing*vFinal[y],
				rPlane[z] + tFocusing*vFinal[z] };
		
		return new double[] { rFocused[x], rFocused[y], rFocused[z], tPlane + tFocusing };
	}
	
	/**
	 * evaluate a single polynomial from that table of coefficients.
	 * @param i the index of the parameter to compute
	 * @param input the initial values to use
	 * @return the final value of parameter i
	 */
	private double cosyPolynomial(int i, double[] input) {
		double output = 0;
		for (int j = 0; j < cosyCoefficients.length; j ++) {
			double term = cosyCoefficients[j][i];
			for (int k = 0; k < input.length; k ++) {
				term *= Math.pow(input[k], cosyExponents[j][k]);
			}
			output += term;
		}
		return output;
	}
	
	public double[] getTimeBins() {
		return this.timeBins;
	}
	
	public double[] getEnergyBins() {
		return this.energyBins;
	}
	
	public double[][] getCorrectedSpectrum() {
		return this.deuteronSpectrum;
	}
	
	public double[][] getInferredSpectrum() {
		return this.fitNeutronSpectrum;
	}
	
	public double[][] getFittedSpectrum() {
		return this.fitDeuteronSpectrum;
	}
	
	public double[] getTimeAxis() {
		return this.timeAxis;
	}
	
	public double[] getNeutronYield() {
		return NumericalMethods.modes(this.measurements[0]);
	}
	
	public double[] getNeutronYieldError() {
		return NumericalMethods.stds(this.measurements[0], this.covarianceMatrix);
	}
	
	public double[] getIonTemperature() {
		return NumericalMethods.modes(this.measurements[1]);
	}
	
	public double[] getIonTemperatureError() {
		return NumericalMethods.stds(this.measurements[1], this.covarianceMatrix);
	}
	
	public double[] getElectronTemperature() {
		return NumericalMethods.modes(this.measurements[2]);
	}
	
	public double[] getElectronTemperatureError() {
		return NumericalMethods.stds(this.measurements[2], this.covarianceMatrix);
	}
	
	public double[] getFlowVelocity() {
		return NumericalMethods.modes(this.measurements[3]);
	}
	
	public double[] getFlowVelocityError() {
		return NumericalMethods.stds(this.measurements[3], this.covarianceMatrix);
	}
	
	public double[] getArealDensity() {
		return NumericalMethods.modes(this.measurements[4]);
	}
	
	public double[] getArealDensityError() {
		return NumericalMethods.stds(this.measurements[4], this.covarianceMatrix);
	}
	
	public double[] getMode2Asymmetry() {
		return NumericalMethods.modes(this.measurements[5]);
	}
	
	public double[] getMode2AsymmetryError() {
		return NumericalMethods.stds(this.measurements[5], this.covarianceMatrix);
	}
	
	
	/**
	 * generate a time-resolved spectrum based on some parameters that vary with time.
	 * @param Yn the neutron yield rate [10^15/ns]
	 * @param Ti the ion temperature [keV]
	 * @param Te the electron temperature [keV]
	 * @param vi the bulk flow rate parallel to the line of sight [μm/ns]
	 * @param ρR the areal density of fuel and shell surrounding the hot spot [g/cm^2]
	 * @param a2 the relative magnitude of the P2 mode
	 * @param t the edges of the time bins [ns]
	 * @param eBins the edges of the energy bins [MeV]
	 * @return the theoretical number of particles in each energy bin, ignoring stochastity.
	 */
	public static double[][] generateSpectrum(
			double[] Yn, double Ti[], double[] Te, double vi[], double ρR[], double[] a2,
			double[] eBins, double[] tBins) {
		double[][] spectrum = new double[eBins.length-1][tBins.length-1];
		for (int j = 0; j < spectrum[0].length; j ++) {
			double dt = (tBins[j+1] - tBins[j]); // bin width [ns]
			double[] timeSlice = generateSpectrum(Yn[j]*dt, Ti[j], Te[j], vi[j], ρR[j], a2[j], eBins);
			for (int i = 0; i < spectrum.length; i ++)
				spectrum[i][j] = timeSlice[i];
		}
		return spectrum;
	}
	
	/**
	 * generate a time-averaged spectrum based on some parameters that are taken to be constant.
	 * @param Yn the total neutron yield [10^15]
	 * @param Ti the ion temperature [keV]
	 * @param Te the electron temperature [keV]
	 * @param vi the bulk flow rate parallel to the line of sight [μm/ns]
	 * @param ρR the areal density of fuel and shell surrounding the hot spot [g/cm^2]
	 * @param a2 the relative magnitude of the P2 mode
	 * @param eBins the edges of the energy bins [MeV]
	 * @return the theoretical number of particles in each energy bin, ignoring stochastity.
	 */
	public static double[] generateSpectrum(
			double Yn, double Ti, double Te, double vi, double ρR, double a2,
			double[] eBins) {
		double nR = ρR/8.35276208e-28; // areal DT number density [m^-2]
		double ΔEth = 5.30509e-3/(1 + 2.4736e-3*Math.pow(Ti, 1.84))*Math.pow(Ti, 2/3.) + 1.3818e-3*Ti;
		double δω =  5.1068e-4/(1 + 7.6223e-3*Math.pow(Ti, 1.78))*Math.pow(Ti, 2/3.) + 8.7691e-5*Ti;
		double avgE = Math.max(0, 14.029 + ΔEth + .54e-3*vi); // primary peak (see paper) [MeV]
		double σth = 177.259e-3/2.35482005*(1 + δω)*Math.sqrt(Ti); // primary width (see paper) [MeV]
		double μ = avgE*Math.sqrt(Math.max(0, 1 - 3/2.*Math.pow(σth/avgE, 2)));
		double σ2 = 4/3.*μ*(avgE - μ);
		double USR = 8.6670e-5*Math.pow(Te, 2.5149); // probability of a neutron being scattered up by an alpha
		double[] Isrc = new double[eBins.length]; // probability distribution at edges [MeV^-1]
		for (int i = 0; i < eBins.length; i ++) {
			if (Ti > 0 && σ2 > 0) {
				Isrc[i] += Yn*1e15/Math.sqrt(2*Math.PI*σ2)*
					Math.exp(-2*μ/σ2*Math.pow(Math.sqrt(eBins[i]) - Math.sqrt(μ), 2));
				Isrc[i] += USR*Yn*1e15*ALPHA_KNOCKON_SPECTRUM.evaluate(eBins[i]);
			}
			else
				Isrc[i] = 0;
		}
		double[] Iprim = Isrc.clone();
		double[] Iscat = new double[eBins.length]; // now do the downscatter spectrum
		final double mn = 939.56563; // [MeV/c^2]
		for (int A = 2; A <= 3; A ++) { // for both deuterium and tritium
			final double mS = (A == 2) ? 1875.61296 : 2808.92116; // [MeV/c^2]
//			final double mR = mS; // because we are not accounting for any inelastic scattering
			final double α = 4*mn*mS/Math.pow(mn + mS, 2);
			for (int i = 0; i < eBins.length; i ++) {
				Iscat[i] = 0;
				double[] cosθ = new double[eBins.length]; // create an array of angles corresponding to energies
				for (int j = i; j < eBins.length; j ++) {
//					double EfLab = eBins[i], EiLab = eBins[j];
//					double EtCM = Math.sqrt(mn*mn + mS*mS + 2*(EiLab + mn)*mS);
//					double EfCM = (EtCM*EtCM + mn*mn + mR*mR)/(2*EtCM);
//					double pfCM = Math.sqrt(EfCM*EfCM - mn*mn);
//					double piLab = Math.sqrt(EiLab*(EiLab + 2*mn));
//					double EtLab = EiLab + mn + mS;
//					cosθ[j] = ((EfLab + mn)*EtCM - EfCM*EtLab)/(piLab*pfCM);
					cosθ[j] = 1 - (1 - eBins[i]/eBins[j])/(α/2); // XXX these equations from Hatarik et al. are just wrong 
				}
				for (int j = i; j < eBins.length-1; j ++) { // at each of those energies
					double dσdΩ = 0;
					for (int l = 0; l < SIGMA_COEFFICIENTS[A].length; l ++)
						dσdΩ += SIGMA_COEFFICIENTS[A][l]*NumericalMethods.legendre(l, cosθ[j]); // estimate the cross section
					double dcosθ = (j == i) ? (cosθ[j+1] - cosθ[j])/2 : (cosθ[j+1] - cosθ[j-1])/2;
					double ψ = 1 + a2*(1.5*Math.pow(cosθ[j], 2) - .5);
					double dΩ = -2*Math.PI*dcosθ;
					Iprim[j] -= Isrc[j]*nR*ψ*dσdΩ*dΩ;
					Iscat[i] += Isrc[j]*nR*ψ*dσdΩ*dΩ;
				}
			}
		}
		
		for (int i = 0; i < eBins.length; i ++) // at some energies, the cross sections can get big enough that the whole spectrum is scattered
			Iprim[i] = Math.max(0, Iprim[i]); // to deal with that, just truncate at 0
		
		double[] Itot = new double[eBins.length];
		for (int i = 0; i < eBins.length; i ++)
			Itot[i] = Iprim[i] + Iscat[i];
		
		double[] counts = new double[eBins.length-1];
		for (int i = 0; i < counts.length; i ++)
			counts[i] = (Itot[i] + Itot[i+1])/2.*(eBins[i+1] - eBins[i]);
		return counts;
	}
	
	/**
	 * convert a time-cumulative spectrum, as read from an input file, into an array of counts.
	 * also, edit energies to make it bin edges. this will remove the last row of energies.
	 * given that the last row is over 29 MeV, I think that's fine.
	 * @param timeAxis the time bin boundaries [ns]
	 * @param energyAxis the energy bin midpoints [MeV]
	 * @param spectrum array of the neutron spectrum integrated in time [#/MeV]
	 * @return spectrum array of the neutron spectrum [#]
	 */
	public static double[][]
			interpretSpectrumFile(double[] times, double[] energies, double[][] spectrum) {
		for (int i = energies.length-1; i > 0; i --) // start by fixing the energies
			energies[i] = (energies[i-1] + energies[i])/2;
		energies[0] = 2*energies[0] - energies[1]; // for the last one, assume equal spacing
		
		double[][] output = new double[energies.length-1][times.length-1];
		for (int i = 0; i < energies.length-1; i ++) { // now for the spectrum
			for (int j = 0; j < times.length-1; j ++)
				output[i][j] = (spectrum[i][j+1] - spectrum[i][j])*(energies[i+1] - energies[i]); // you're just taking this derivative
		}
		
		return output;
	}
	
	/**
	 * modify a spectrum artificially in place.
	 * @param times the time bin boundaries [ns]
	 * @param energies the energy bin midpoints [MeV]
	 * @param spectrum array of the neutron spectrum integrated in time [#/MeV]
	 * @param yield the flat yield modifier to apply
	 * @param temp the flat temperature modifier to apply
	 * @param downS the flat down scatter yield modifier to apply
	 * @param flow the flat velocity shift to apply [km/s]
	 */
	public static void modifySpectrum(double[] times, double[] energies, double[][] spectrum,
					double yield, double temp, double downS, double flow) {
		for (int i = 0; i < energies.length - 1; i ++) { // scale the whole thing up or down to change yield (and account for the broadening)
			for (int j = 0; j < times.length - 1; j ++) {
				if (energies[i] >= 13.3)
					spectrum[i][j] = yield/Math.sqrt(temp)*spectrum[i][j];
				else
					spectrum[i][j] = yield*downS/Math.sqrt(temp)*spectrum[i][j];
			}
		}
		for (int j = 0; j < times.length - 1; j ++) { // scale it in energy space to change temperature
			double[] slice = new double[energies.length - 1];
			for (int i = 0; i < energies.length - 1; i ++)
				slice[i] = spectrum[i][j];
			int argmax = NumericalMethods.argmax(slice);
			double ePeak = NumericalMethods.mean(energies, slice);
			double iPeak = argmax + (ePeak - energies[argmax])/(energies[1] - energies[0]); // find the peak index (assume equally spaced energy bins)
			iPeak = NumericalMethods.coerce(argmax-1, argmax+1, iPeak);
			for (int i = 0; i < energies.length - 1; i ++) {
				double iP = iPeak + (i - iPeak)/Math.sqrt(temp);
				if (iP >= 0 && iP < energies.length-2)
					spectrum[i][j] = (1-iP%1)*slice[(int)iP] + (iP%1)*slice[(int)iP+1];
				else
					spectrum[i][j] = 0;
			}
		}
		for (int i = 0; i < energies.length; i ++)
			energies[i] = energies[i] - .54e-3*flow;

	}
	
	/**
	 * square a vector, because this takes so long to write out every time.
	 * @param v
	 * @return
	 */
	private static double sqr(double[] v) {
		double s = 0;
		for (double x: v)
			s += Math.pow(x, 2);
		return s;
	}
}
