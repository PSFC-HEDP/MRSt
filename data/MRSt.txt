      PROGRAM MRSt_response

c     Johan Frenje April 2018

      PARAMETER (n = 84)
      PARAMETER (m = 160)
      PARAMETER (il = 120)
      PARAMETER (iq = 1000)
      PARAMETER (itable = 300000)
      PARAMETER (it_max = 2400)
      PARAMETER (ie_max = 160)
      PARAMETER (icolumn = 6)     
      PARAMETER (irow = 56)
      PARAMETER (PI = 3.141592654)
      
      CHARACTER*20 order
      
      INTEGER i, j, k, ik, l, q, i_top_e, it, ie
      INTEGER seed, ipart, npart_tot, iinit, distr_max
      
      INTEGER time_bins, step
      
      REAL A1, Eref, e_table
      REAL weight
      REAL r_max, foil_rad, foil_area, distance_foil, thickness
      REAL aperture_distance, aperture_width, aperture_height
      REAL aperture_area, efficiency
      REAL nspec, nspec_tot, nspec_tot_sum, n_emission
      REAL time1
      REAL rannum
      REAL emax, h, e
      REAL vinkel, x0, y0, z0, distance
      REAL vnx, vny, vnz, vn, En
      REAL x_aper, y_aper, z_aper, aper_distance
      REAL vpx, vpy, vpz, vp, theta1
      REAL einit
      REAL track_x, track_y, track_z, track_length
      
      REAL theta, Ep, mass, u, vel, gamma
      REAL ME, x0_max, a0_max, y0_max, b0_max, t0_max, d0_max
      REAL a0, b0, t0, d0
      REAL x, a, y, b, t, t5, d, z
      
      REAL vref, vxabs, vyabs, x1, y1, z1_temp, tilt_t5
      
      REAL distr, distr_rebin
      REAL distr_rebin2, distr_rebin2_tot
      REAL distr_ttot, distr_etot, distr_tot, time0, dt, r_FP
      
      REAL distr_rebin3
      
      REAL IRF, Eneut, nspec_sum, n_emission_sum, nspec_diff
      
      REAL dE, mean_sum, mean, E_mean, sigma, E_deut
  
      
      REAL Yn, dYn,Yn_sum
      REAL dsr, ddsr, dsr_sum
      REAL dE_doppler, ddE_doppler

      REAL mean_value, dmean_value
      
      REAL Ti, dTi
      REAL rR, drR
      REAL yield, dyield
     
      REAL Ti_slope, dTi_slope, Ti_const,  dTi_const
      REAL rR_slope, drR_slope, rR_const,  drR_const
      
      REAL Ti_sum1, Ti_sum2, Ti_sum3, Ti_sum4
      REAL rR_sum1, rR_sum2, rR_sum3, rR_sum4
      
      REAL Ti_factor, rR_factor1, k1, m1, rR_factor2
      
      REAL BT, BT_err, rR_ramp_err

      CHARACTER*20 facility, particle, spectrum, n_bkgd, energy_bins
      
      DIMENSION e_table(itable)
      DIMENSION s(n), ye(n), ue(n), ve(n), ze(n), we(n), be(n)
      DIMENSION nspec(iq,il), nspec_tot(iq), n_emission(il)
      DIMENSION ME(icolumn,irow)
      
      DIMENSION time1(il)
      DIMENSION distr(ie_max,it_max)
      DIMENSION distr_rebin(ie_max,it_max)
      DIMENSION distr_rebin2(ie_max,it_max)
      DIMENSION distr_rebin3(ie_max,it_max)
      DIMENSION distr_rebin2_tot(ie_max)
      DIMENSION distr_ttot(it_max), distr_etot(ie_max)
      DIMENSION time0(5000)

      DIMENSION Eneut(iq)      
      DIMENSION Yn(it_max), dYn(it_max)
      DIMENSION dsr(it_max), ddsr(it_max)
      DIMENSION dE_doppler(it_max), ddE_doppler(it_max)
      
      DIMENSION mean_value(it_max), dmean_value(it_max)
      
      DIMENSION Ti(it_max), dTi(it_max)
      DIMENSION rR(it_max), drR(it_max)
      DIMENSION yield(it_max), dyield(it_max)

      DIMENSION mean_value_diff(it_max), dmean_value_diff(it_max)

      COMMON /energies/ e_table, emax, i_top_e

c      WRITE(*,*)"First/Second/Third-order calculation? (1/2/3)"
c      READ(*,*)order

      order = '3'
      
      OPEN (unit = 11, file = 'MRSt_IRF.txt' , status='old')
      DO j = 1,irow
          READ (11,*)ME(1,j), ME(2,j), ME(3,j), 
     &               ME(4,j), ME(5,j), ME(6,j)
      END DO      
      CLOSE (unit = 11)

c     Deuteron energy [keV]
      DATA s/ 10.000, 11.000, 12.000, 13.000, 14.000,
     &   15.000, 16.000, 17.000, 18.000, 20.000,
     &   22.500, 25.000, 27.500, 30.000, 32.500,
     &   35.000, 37.500, 40.000, 45.000, 50.000,
     &   55.000, 60.000, 65.000, 70.000, 80.000,
     &   90.000, 100.00, 110.00, 120.00, 130.00,
     &   140.00, 150.00, 160.00, 170.00, 180.00,
     &   200.00, 225.00, 250.00, 275.00, 300.00,
     &   325.00, 350.00, 375.00, 400.00, 450.00,
     &   500.00, 550.00, 600.00, 650.00, 700.00,
     &   800.00, 900.00, 1000.0, 1100.0, 1200.0,
     &   1300.0, 1400.0, 1500.0, 1600.0, 1700.0,
     &   1800.0, 2000.0, 2250.0, 2500.0, 2750.0,
     &   3000.0, 3250.0, 3500.0, 3750.0, 4000.0,
     &   4500.0, 5000.0, 5500.0, 6000.0, 6500.0,
     &   7000.0, 8000.0, 9000.0, 10000.0, 11000.0,
     &   12000.0, 13000.0, 14000.0, 15000.0/
      
      distr_tot = 0.0
      DO i = 1,ie_max
          distr_etot(i) = 0.0
          distr_rebin2_tot(i) = 0.0
          DO j = 1,it_max
              distr(i,j) = 0.0
              distr_rebin(i,j) = 0.0
              distr_rebin2(i,j) = 0.0
              distr_rebin3(i,j) = 0.0
              distr_ttot(i) = 0.0
          END DO
      END DO
      u = 1.66054e-27      ! kg
      gamma = 1
c     dE/dx for deuterons [keV/um]
      OPEN (unit=12, file='Deuterons.txt', status='old')
      DO i=1,n
          READ(12,*)ye(i)
      END DO
      CLOSE (unit=12)
      A1 = 2.014
      mass = A1*u
      Eref = 12.4500
      vref = sqrt(2*Eref*1.602e-13/mass)
      S4 = 0.6
      CALL ZSPLINE(n,s,ye,we,be,ue,ve,ze)
      
      energy_bins = 'Energy bins.txt'  
      OPEN (unit=24, file = energy_bins, status='old')
      DO i=1,iq
          READ(24,*)Eneut(i)
      END DO
      CLOSE (unit=24)     
      

      OPEN (unit=25,file='nsp_150327_16p26_time.txt',status='old')
      i = 1
      DO
          READ(25,*,end=11)time1(i)
          time1(i) = time1(i) - 0.1
          i = i + 1
      END DO
11    CONTINUE
      time_bins = i - 1    
      CLOSE (unit=25)
      
      OPEN (unit=99, file='Test.txt', status='unknown')

      spectrum = 'nsp_150327_16p26.txt'
      OPEN (unit=23, file = spectrum, status='old')
      DO i=1,iq
          READ(23,*) (nspec(i,j), j=1,time_bins)
      END DO 
      CLOSE (unit = 23)
      
      DO i=1,iq
          DO j = 1,time_bins-1
              nspec(i,time_bins-j+1) = 0.03*(nspec(i,time_bins-j+1) 
     &                                 - nspec(i,time_bins-j))
          END DO
      END DO       
 
      OPEN (unit=14, file = spectrum, status='old')
      DO i = 1,iq
          nspec_sum = 0.0
          DO j = 1,time_bins
              nspec_sum = nspec_sum + nspec(i,j)
          END DO
          nspec_tot(i) = nspec_sum
      END DO      
      CLOSE (unit=14)

      r_max = 3.0e-4                ! m
      foil_area = PI*r_max*r_max
      distance_foil = 0.003         ! m
      thickness = 80.0              !um
      
      IF (thickness.EQ.25.0) THEN
          dt = 20
      ELSE IF (thickness.EQ.50.0) THEN
          dt = 20      
      ELSE IF (thickness.EQ.80.0) THEN
          dt = 20
      END IF
      
c      dE = 25  ! defined later in the code
      distr_max = 1626
      
      Ti_factor = 1.0709
     &            - 0.022756*thickness
     &            + 0.0013506*thickness**2
     &            - 2.8024e-5*thickness**3
     &            + 2.2219e-7*thickness**4     
      rR_factor1 = 1.1835 - 0.0055139*thickness
      k1 = -4.9439 + 0.010185*thickness
      m1 = 81.112 - 0.16647*thickness
      thickness = thickness*1e-6    ! m
      aperture_distance = 6.0       ! m
      aperture_width = 0.004        ! m
      aperture_height = 0.02        ! m
      aperture_area = aperture_width*aperture_height
c      effciency = 1.8e-12
      t0_max = 0.0
      t0 = 0.0
      d0_max = 0.0 !0.000143
      
      IRF = 5.8743*thickness*1e6       ! FWHM in keV vs foil thickness
          
      OPEN (unit=44, file = 'n_spectrum_int.txt', status='unknown')
      DO i = 1,iq
          WRITE(44,*)Eneut(i), nspec_tot(i)
      END DO
      CLOSE (unit = 44)  
      
      OPEN (unit=24, file = 'time0.txt', status='old')
      DO i = 1,5000    !  time for central trajectory vs deuteron energy
          READ(24,*)time0(i)
      END DO
      CLOSE (unit = 24)
      
      DO j = 1,time_bins
          n_emission(j) = 0.0
      END DO
            
      DO j = 1,time_bins
          n_emission_sum = 0.0
          DO i = 1,iq
              n_emission_sum = n_emission_sum + nspec(i,j)
          END DO
          n_emission(j) = n_emission_sum
      END DO
      
      OPEN (unit=34, file = 'n_emission_hist.txt', status='unknown')
      DO i = 1,time_bins
          WRITE(34,*)time1(i), n_emission(i)
      END DO
      CLOSE (unit = 34)
    
c      nspec_tot_sum = 0.0
c      DO i = 1,m
c          nspec_tot_sum =  nspec_tot_sum + nspec_tot(i)
c      END DO

      emax = 16000.0
      h = 0.01
      e = emax
      i=1
      DO WHILE (e.gt.0.0)
          e_table(i)=e
          i  =  i + 1
          f1 = -h*spl(n,s,ye,ze,e)
          f2 = -h*spl(n,s,ye,ze,e+0.5*f1)
          f3 = -h*spl(n,s,ye,ze,e+0.5*f2)
          f4 = -h*spl(n,s,ye,ze,e+f3)
          e  = e +(f1+f2+f2+f3+f3+f4)/6.0000
      END DO
      

      i_top_e = i - 1      
      DO j = i_top_e,itable
          e_table(j) = 0.0
      END DO
      
      rannum = 0.0
      seed = 2*INT(2000*(secnds(rannum)+20000.0))+1
      OPEN (unit = 37, file = 'Evolution.txt', status='unknown')
      OPEN (unit = 47, file = 'Evolution diff.txt', status='unknown')
      DO ik = 1,1000
          DO i = 1,ie_max
              DO j = 1,it_max
                  distr(i,j) = 0.0
              END DO
          END DO      
          DO i = 1,ie_max
              distr_etot(i) = 0.0
          END DO
          DO j = 1,it_max
              distr_ttot(j) = 0.0
              dsr(j) = 0.0
              Yn(j) = 0.0
              Ti(j) = 0.0
          END DO
          weight = 10**(-4*RAN0(seed))
          npart_tot = 0.0
          DO i = 401,550,1
              En = 1000*Eneut(i)
              DO j = 1, time_bins
                  npart = INT(weight*nspec(i,j)*(foil_area/
     &                (4*PI*distance_foil**2))*0.08*
     &                (4.3228/sqrt(En/1000)-0.6523)*
     &                1e2*thickness*(aperture_area/
     &                (aperture_distance-distance_foil)**2)+0.5)
c                  pause
     
                  npart_tot = npart_tot + npart     
                  efficiency = (foil_area/
     &                (4*PI*distance_foil**2))*0.08*
     &                (4.3228/sqrt(En/1000)-0.6523)*
     &                1e2*thickness*(aperture_area/
     &                (aperture_distance-distance_foil)**2)
                  DO k = 1,npart
                      tburn = 1e3*time1(j)        ! ps
                      vinkel = 2*PI*RAN0(seed)
                      foil_rad = sqrt(RAN0(seed))*r_max
                      x0 = foil_rad*cos(vinkel)
                      y0 = foil_rad*sin(vinkel)
                      z0 = RAN0(seed)*thickness - thickness/2
                      distance = sqrt(x0**2 + y0**2 + 
     &                            (distance_foil + z0)**2)     
                      vnx = x0
                      vny = y0
                      vnz = (distance_foil + z0)
                      vn = sqrt(vnx*vnx+vny*vny+vnz*vnz)
                      
                      x_aper = aperture_width*RAN0(seed) - 
     &								  aperture_width/2
                      y_aper = aperture_height*RAN0(seed) - 
     &								  aperture_height/2
                      z_aper = aperture_distance + z0
                      aper_distance = sqrt(x_aper**2 + y_aper**2 + 
     &                                                    z_aper**2)
                  
                      vpx = x_aper - x0
                      vpy = y_aper - y0                  
                      vpz = aperture_distance
                      vp = sqrt(vpx*vpx+vpy*vpy+vpz*vpz)                 
                      IF (((vnx*vpx + vny*vpy + vnz*vpz)/(vn*vp)).GT.
     &											  1.0) THEN
                          theta1 = 1.0
                      ELSE
                          theta1 = (vnx*vpx + vny*vpy + vnz*vpz)/(vn*vp)
                      END IF

                      vpx = vpx/vp
                      vpy = vpy/vp                                  
                      vpz = vpz/vp
                      
                      einit = 0.88889*En*theta1*theta1
                      iinit = ie_find(einit)
                      track_z = (thickness/2 - z0)
                      track_x = track_z*vpx/vpz
                      track_y = track_z*vpy/vpz
                      track_length = sqrt(track_x**2 + track_y**2 + 
     &                                                      track_z**2)     
                      stop_length = 1e-6*(i_top_e - iinit)
                      q = iinit + INT(track_length*1e8+0.5)
                      epart1 = e_table(q) + 0.035*(2*RAN0(seed)-1.0)
                      
                      vel = sqrt(2*epart1*1.602e-16/mass)
                      
                      vxabs = vpx*vel
                      vyabs = vpy*vel
                      
                      a0 = vxabs/vref
                      b0 = vyabs/vref                  
                      
                      d0 = (epart1 - 1e3*Eref)/(1e3*Eref)            
                      t0 = 0.0
                      
                      IF (order.EQ.'1') THEN
                          x = ME(1,1)*x0 +
     &                    ME(1,2)*a0 +
     &                    ME(1,3)*y0 +
     &                    ME(1,4)*b0 +
     &                    ME(1,5)*t0 +
     &                    ME(1,6)*d0
                      ELSE IF (order.EQ.'2') THEN
                          x = ME(1,1)*x0 +
     &                    ME(1,2)*a0 +
     &                    ME(1,3)*y0 +
     &                    ME(1,4)*b0 +
     &                    ME(1,5)*t0 +
     &                    ME(1,6)*d0 +
     &                    ME(1,7)*x0*x0 +
     &                    ME(1,8)*x0*a0 +
     &                    ME(1,9)*a0*a0 +
     &                    ME(1,10)*x0*y0 +
     &                    ME(1,11)*a0*y0 +
     &                    ME(1,12)*y0*y0 +
     &                    ME(1,13)*x0*b0 +
     &                    ME(1,14)*a0*b0 +
     &                    ME(1,15)*y0*b0 +
     &                    ME(1,16)*b0*b0 +
     &                    ME(1,17)*x0*d0 +
     &                    ME(1,18)*a0*d0 +
     &                    ME(1,19)*y0*d0 +
     &                    ME(1,20)*b0*d0 +
     &                    ME(1,21)*d0*d0
                      ELSE IF (order.EQ.'3') THEN
                          x = ME(1,1)*x0 +
     &                    ME(1,2)*a0 +
     &                    ME(1,3)*y0 +
     &                    ME(1,4)*b0 +
     &                    ME(1,5)*t0 +
     &                    ME(1,6)*d0 +
     &                    ME(1,7)*x0*x0 +
     &                    ME(1,8)*x0*a0 +
     &                    ME(1,9)*a0*a0 +
     &                    ME(1,10)*x0*y0 +
     &                    ME(1,11)*a0*y0 +
     &                    ME(1,12)*y0*y0 +
     &                    ME(1,13)*x0*b0 +
     &                    ME(1,14)*a0*b0 +
     &                    ME(1,15)*y0*b0 +
     &                    ME(1,16)*b0*b0 +
     &                    ME(1,17)*x0*d0 +
     &                    ME(1,18)*a0*d0 +
     &                    ME(1,19)*y0*d0 +
     &                    ME(1,20)*b0*d0 +
     &                    ME(1,21)*d0*d0 +
     &                    ME(1,22)*x0*x0*x0 +
     &                    ME(1,23)*x0*x0*a0 +
     &                    ME(1,24)*x0*a0*a0 +
     &                    ME(1,25)*a0*a0*a0 +
     &                    ME(1,26)*x0*x0*y0 +
     &                    ME(1,27)*x0*a0*y0 +
     &                    ME(1,28)*a0*a0*y0 +
     &                    ME(1,29)*x0*y0*y0 +
     &                    ME(1,30)*a0*y0*y0 +
     &                    ME(1,31)*y0*y0*y0 +
     &                    ME(1,32)*x0*x0*b0 +
     &                    ME(1,33)*x0*a0*b0 +
     &                    ME(1,34)*a0*a0*b0 +
     &                    ME(1,35)*x0*y0*b0 +
     &                    ME(1,36)*a0*y0*b0 +
     &                    ME(1,37)*y0*y0*b0 +
     &                    ME(1,38)*x0*b0*b0 +
     &                    ME(1,39)*a0*b0*b0 +
     &                    ME(1,40)*y0*b0*b0 +
     &                    ME(1,41)*b0*b0*b0 +
     &                    ME(1,42)*x0*x0*d0 +
     &                    ME(1,43)*x0*a0*d0 +
     &                    ME(1,44)*a0*a0*d0 +
     &                    ME(1,45)*x0*y0*d0 +
     &                    ME(1,46)*a0*y0*d0 +
     &                    ME(1,47)*y0*y0*d0 +
     &                    ME(1,48)*x0*b0*d0 +
     &                    ME(1,49)*a0*b0*d0 +
     &                    ME(1,50)*y0*b0*d0 +
     &                    ME(1,51)*b0*b0*d0 +
     &                    ME(1,52)*x0*d0*d0 +
     &                    ME(1,53)*a0*d0*d0 +
     &                    ME(1,54)*y0*d0*d0 +
     &                    ME(1,55)*b0*d0*d0 +
     &                    ME(1,56)*d0*d0*d0
                      END IF
                      IF (order.EQ.'1') THEN
                          a = ME(2,1)*x0 +
     &                    ME(2,2)*a0 +
     &                    ME(2,3)*y0 +
     &                    ME(2,4)*b0 +
     &                    ME(2,5)*t0 +
     &                    ME(2,6)*d0
                      ELSE IF (order.EQ.'2') THEN
                          a = ME(2,1)*x0 +
     &                    ME(2,2)*a0 +
     &                    ME(2,3)*y0 +
     &                    ME(2,4)*b0 +
     &                    ME(2,5)*t0 +
     &                    ME(2,6)*d0 +
     &                    ME(2,7)*x0*x0 +
     &                    ME(2,8)*x0*a0 +
     &                    ME(2,9)*a0*a0 +
     &                    ME(2,10)*x0*y0 +
     &                    ME(2,11)*a0*y0 +
     &                    ME(2,12)*y0*y0 +
     &                    ME(2,13)*x0*b0 +
     &                    ME(2,14)*a0*b0 +
     &                    ME(2,15)*y0*b0 +
     &                    ME(2,16)*b0*b0 +
     &                    ME(2,17)*x0*d0 +
     &                    ME(2,18)*a0*d0 +
     &                    ME(2,19)*y0*d0 +
     &                    ME(2,20)*b0*d0 +
     &                    ME(2,21)*d0*d0
                      ELSE IF (order.EQ.'3') THEN
                          a = ME(2,1)*x0 +
     &                    ME(2,2)*a0 +
     &                    ME(2,3)*y0 +
     &                    ME(2,4)*b0 +
     &                    ME(2,5)*t0 +
     &                    ME(2,6)*d0 +
     &                    ME(2,7)*x0*x0 +
     &                    ME(2,8)*x0*a0 +
     &                    ME(2,9)*a0*a0 +
     &                    ME(2,10)*x0*y0 +
     &                    ME(2,11)*a0*y0 +
     &                    ME(2,12)*y0*y0 +
     &                    ME(2,13)*x0*b0 +
     &                    ME(2,14)*a0*b0 +
     &                    ME(2,15)*y0*b0 +
     &                    ME(2,16)*b0*b0 +
     &                    ME(2,17)*x0*d0 +
     &                    ME(2,18)*a0*d0 +
     &                    ME(2,19)*y0*d0 +
     &                    ME(2,20)*b0*d0 +
     &                    ME(2,21)*d0*d0 +
     &                    ME(2,22)*x0*x0*x0 +
     &                    ME(2,23)*x0*x0*a0 +
     &                    ME(2,24)*x0*a0*a0 +
     &                    ME(2,25)*a0*a0*a0 +
     &                    ME(2,26)*x0*x0*y0 +
     &                    ME(2,27)*x0*a0*y0 +
     &                    ME(2,28)*a0*a0*y0 +
     &                    ME(2,29)*x0*y0*y0 +
     &                    ME(2,30)*a0*y0*y0 +
     &                    ME(2,31)*y0*y0*y0 +
     &                    ME(2,32)*x0*x0*b0 +
     &                    ME(2,33)*x0*a0*b0 +
     &                    ME(2,34)*a0*a0*b0 +
     &                    ME(2,35)*x0*y0*b0 +
     &                    ME(2,36)*a0*y0*b0 +
     &                    ME(2,37)*y0*y0*b0 +
     &                    ME(2,38)*x0*b0*b0 +
     &                    ME(2,39)*a0*b0*b0 +
     &                    ME(2,40)*y0*b0*b0 +
     &                    ME(2,41)*b0*b0*b0 +
     &                    ME(2,42)*x0*x0*d0 +
     &                    ME(2,43)*x0*a0*d0 +
     &                    ME(2,44)*a0*a0*d0 +
     &                    ME(2,45)*x0*y0*d0 +
     &                    ME(2,46)*a0*y0*d0 +
     &                    ME(2,47)*y0*y0*d0 +
     &                    ME(2,48)*x0*b0*d0 +
     &                    ME(2,49)*a0*b0*d0 +
     &                    ME(2,50)*y0*b0*d0 +
     &                    ME(2,51)*b0*b0*d0 +
     &                    ME(2,52)*x0*d0*d0 +
     &                    ME(2,53)*a0*d0*d0 +
     &                    ME(2,54)*y0*d0*d0 +
     &                    ME(2,55)*b0*d0*d0 +
     &                    ME(2,56)*d0*d0*d0
                      END IF
                      IF (order.EQ.'1') THEN
                          y = ME(3,1)*x0 +
     &                    ME(3,2)*a0 +
     &                    ME(3,3)*y0 +
     &                    ME(3,4)*b0 +
     &                    ME(3,5)*t0 +
     &                    ME(3,6)*d0
                      ELSE IF (order.EQ.'2') THEN
                          y = ME(3,1)*x0 +
     &                    ME(3,2)*a0 +
     &                    ME(3,3)*y0 +
     &                    ME(3,4)*b0 +
     &                    ME(3,5)*t0 +
     &                    ME(3,6)*d0 +
     &                    ME(3,7)*x0*x0 +
     &                    ME(3,8)*x0*a0 +
     &                    ME(3,9)*a0*a0 +
     &                    ME(3,10)*x0*y0 +
     &                    ME(3,11)*a0*y0 +
     &                    ME(3,12)*y0*y0 +
     &                    ME(3,13)*x0*b0 +
     &                    ME(3,14)*a0*b0 +
     &                    ME(3,15)*y0*b0 +
     &                    ME(3,16)*b0*b0 +
     &                    ME(3,17)*x0*d0 +
     &                    ME(3,18)*a0*d0 +
     &                    ME(3,19)*y0*d0 +
     &                    ME(3,20)*b0*d0 +
     &                    ME(3,21)*d0*d0
                      ELSE IF (order.EQ.'3') THEN
                          y = ME(3,1)*x0 +
     &                    ME(3,2)*a0 +
     &                    ME(3,3)*y0 +
     &                    ME(3,4)*b0 +
     &                    ME(3,5)*t0 +
     &                    ME(3,6)*d0 +
     &                    ME(3,7)*x0*x0 +
     &                    ME(3,8)*x0*a0 +
     &                    ME(3,9)*a0*a0 +
     &                    ME(3,10)*x0*y0 +
     &                    ME(3,11)*a0*y0 +
     &                    ME(3,12)*y0*y0 +
     &                    ME(3,13)*x0*b0 +
     &                    ME(3,14)*a0*b0 +
     &                    ME(3,15)*y0*b0 +
     &                    ME(3,16)*b0*b0 +
     &                    ME(3,17)*x0*d0 +
     &                    ME(3,18)*a0*d0 +
     &                    ME(3,19)*y0*d0 +
     &                    ME(3,20)*b0*d0 +
     &                    ME(3,21)*d0*d0 +
     &                    ME(3,22)*x0*x0*x0 +
     &                    ME(3,23)*x0*x0*a0 +
     &                    ME(3,24)*x0*a0*a0 +
     &                    ME(3,25)*a0*a0*a0 +
     &                    ME(3,26)*x0*x0*y0 +
     &                    ME(3,27)*x0*a0*y0 +
     &                    ME(3,28)*a0*a0*y0 +
     &                    ME(3,29)*x0*y0*y0 +
     &                    ME(3,30)*a0*y0*y0 +
     &                    ME(3,31)*y0*y0*y0 +
     &                    ME(3,32)*x0*x0*b0 +
     &                    ME(3,33)*x0*a0*b0 +
     &                    ME(3,34)*a0*a0*b0 +
     &                    ME(3,35)*x0*y0*b0 +
     &                    ME(3,36)*a0*y0*b0 +
     &                    ME(3,37)*y0*y0*b0 +
     &                    ME(3,38)*x0*b0*b0 +
     &                    ME(3,39)*a0*b0*b0 +
     &                    ME(3,40)*y0*b0*b0 +
     &                    ME(3,41)*b0*b0*b0 +
     &                    ME(3,42)*x0*x0*d0 +
     &                    ME(3,43)*x0*a0*d0 +
     &                    ME(3,44)*a0*a0*d0 +
     &                    ME(3,45)*x0*y0*d0 +
     &                    ME(3,46)*a0*y0*d0 +
     &                    ME(3,47)*y0*y0*d0 +
     &                    ME(3,48)*x0*b0*d0 +
     &                    ME(3,49)*a0*b0*d0 +
     &                    ME(3,50)*y0*b0*d0 +
     &                    ME(3,51)*b0*b0*d0 +
     &                    ME(3,52)*x0*d0*d0 +
     &                    ME(3,53)*a0*d0*d0 +
     &                    ME(3,54)*y0*d0*d0 +
     &                    ME(3,55)*b0*d0*d0 +
     &                    ME(3,56)*d0*d0*d0
                      END IF
                      IF (order.EQ.'1') THEN
                          b = ME(4,1)*x0 +
     &                    ME(4,2)*a0 +
     &                    ME(4,3)*y0 +
     &                    ME(4,4)*b0 +
     &                    ME(4,5)*t0 +
     &                    ME(4,6)*d0
                      ELSE IF (order.EQ.'2') THEN
                          b = ME(4,1)*x0 +
     &                    ME(4,2)*a0 +
     &                    ME(4,3)*y0 +
     &                    ME(4,4)*b0 +
     &                    ME(4,5)*t0 +
     &                    ME(4,6)*d0 +
     &                    ME(4,7)*x0*x0 +
     &                    ME(4,8)*x0*a0 +
     &                    ME(4,9)*a0*a0 +
     &                    ME(4,10)*x0*y0 +
     &                    ME(4,11)*a0*y0 +
     &                    ME(4,12)*y0*y0 +
     &                    ME(4,13)*x0*b0 +
     &                    ME(4,14)*a0*b0 +
     &                    ME(4,15)*y0*b0 +
     &                    ME(4,16)*b0*b0 +
     &                    ME(4,17)*x0*d0 +
     &                    ME(4,18)*a0*d0 +
     &                    ME(4,19)*y0*d0 +
     &                    ME(4,20)*b0*d0 +
     &                    ME(4,21)*d0*d0
                      ELSE IF (order.EQ.'3') THEN
                          b = ME(4,1)*x0 +
     &                    ME(4,2)*a0 +
     &                    ME(4,3)*y0 +
     &                    ME(4,4)*b0 +
     &                    ME(4,5)*t0 +
     &                    ME(4,6)*d0 +
     &                    ME(4,7)*x0*x0 +
     &                    ME(4,8)*x0*a0 +
     &                    ME(4,9)*a0*a0 +
     &                    ME(4,10)*x0*y0 +
     &                    ME(4,11)*a0*y0 +
     &                    ME(4,12)*y0*y0 +
     &                    ME(4,13)*x0*b0 +
     &                    ME(4,14)*a0*b0 +
     &                    ME(4,15)*y0*b0 +
     &                    ME(4,16)*b0*b0 +
     &                    ME(4,17)*x0*d0 +
     &                    ME(4,18)*a0*d0 +
     &                    ME(4,19)*y0*d0 +
     &                    ME(4,20)*b0*d0 +
     &                    ME(4,21)*d0*d0 +
     &                    ME(4,22)*x0*x0*x0 +
     &                    ME(4,23)*x0*x0*a0 +
     &                    ME(4,24)*x0*a0*a0 +
     &                    ME(4,25)*a0*a0*a0 +
     &                    ME(4,26)*x0*x0*y0 +
     &                    ME(4,27)*x0*a0*y0 +
     &                    ME(4,28)*a0*a0*y0 +
     &                    ME(4,29)*x0*y0*y0 +
     &                    ME(4,30)*a0*y0*y0 +
     &                    ME(4,31)*y0*y0*y0 +
     &                    ME(4,32)*x0*x0*b0 +
     &                    ME(4,33)*x0*a0*b0 +
     &                    ME(4,34)*a0*a0*b0 +
     &                    ME(4,35)*x0*y0*b0 +
     &                    ME(4,36)*a0*y0*b0 +
     &                    ME(4,37)*y0*y0*b0 +
     &                    ME(4,38)*x0*b0*b0 +
     &                    ME(4,39)*a0*b0*b0 +
     &                    ME(4,40)*y0*b0*b0 +
     &                    ME(4,41)*b0*b0*b0 +
     &                    ME(4,42)*x0*x0*d0 +
     &                    ME(4,43)*x0*a0*d0 +
     &                    ME(4,44)*a0*a0*d0 +
     &                    ME(4,45)*x0*y0*d0 +
     &                    ME(4,46)*a0*y0*d0 +
     &                    ME(4,47)*y0*y0*d0 +
     &                    ME(4,48)*x0*b0*d0 +
     &                    ME(4,49)*a0*b0*d0 +
     &                    ME(4,50)*y0*b0*d0 +
     &                    ME(4,51)*b0*b0*d0 +
     &                    ME(4,52)*x0*d0*d0 +
     &                    ME(4,53)*a0*d0*d0 +
     &                    ME(4,54)*y0*d0*d0 +
     &                    ME(4,55)*b0*d0*d0 +
     &                    ME(4,56)*d0*d0*d0
                      END IF
                      IF (order.EQ.'1') THEN
                          t = ME(5,1)*x0 +
     &                    ME(5,2)*a0 +
     &                    ME(5,3)*y0 +
     &                    ME(5,4)*b0 +
     &                    ME(5,5)*t0 +
     &                    ME(5,6)*d0
                      ELSE IF (order.EQ.'2') THEN
                          t = ME(5,1)*x0 +
     &                    ME(5,2)*a0 +
     &                    ME(5,3)*y0 +
     &                    ME(5,4)*b0 +
     &                    ME(5,5)*t0 +
     &                    ME(5,6)*d0 +
     &                    ME(5,7)*x0*x0 +
     &                    ME(5,8)*x0*a0 +
     &                    ME(5,9)*a0*a0 +
     &                    ME(5,10)*x0*y0 +
     &                    ME(5,11)*a0*y0 +
     &                    ME(5,12)*y0*y0 +
     &                    ME(5,13)*x0*b0 +
     &                    ME(5,14)*a0*b0 +
     &                    ME(5,15)*y0*b0 +
     &                    ME(5,16)*b0*b0 +
     &                    ME(5,17)*x0*d0 +
     &                    ME(5,18)*a0*d0 +
     &                    ME(5,19)*y0*d0 +
     &                    ME(5,20)*b0*d0 +
     &                    ME(5,21)*d0*d0
                      ELSE IF (order.EQ.'3') THEN
                          t = ME(5,1)*x0 +
     &                    ME(5,2)*a0 +
     &                    ME(5,3)*y0 +
     &                    ME(5,4)*b0 +
     &                    ME(5,5)*t0 +
     &                    ME(5,6)*d0 +
     &                    ME(5,7)*x0*x0 +
     &                    ME(5,8)*x0*a0 +
     &                    ME(5,9)*a0*a0 +
     &                    ME(5,10)*x0*y0 +
     &                    ME(5,11)*a0*y0 +
     &                    ME(5,12)*y0*y0 +
     &                    ME(5,13)*x0*b0 +
     &                    ME(5,14)*a0*b0 +
     &                    ME(5,15)*y0*b0 +
     &                    ME(5,16)*b0*b0 +
     &                    ME(5,17)*x0*d0 +
     &                    ME(5,18)*a0*d0 +
     &                    ME(5,19)*y0*d0 +
     &                    ME(5,20)*b0*d0 +
     &                    ME(5,21)*d0*d0 +
     &                    ME(5,22)*x0*x0*x0 +
     &                    ME(5,23)*x0*x0*a0 +
     &                    ME(5,24)*x0*a0*a0 +
     &                    ME(5,25)*a0*a0*a0 +
     &                    ME(5,26)*x0*x0*y0 +
     &                    ME(5,27)*x0*a0*y0 +
     &                    ME(5,28)*a0*a0*y0 +
     &                    ME(5,29)*x0*y0*y0 +
     &                    ME(5,30)*a0*y0*y0 +
     &                    ME(5,31)*y0*y0*y0 +
     &                    ME(5,32)*x0*x0*b0 +
     &                    ME(5,33)*x0*a0*b0 +
     &                    ME(5,34)*a0*a0*b0 +
     &                    ME(5,35)*x0*y0*b0 +
     &                    ME(5,36)*a0*y0*b0 +
     &                    ME(5,37)*y0*y0*b0 +
     &                    ME(5,38)*x0*b0*b0 +
     &                    ME(5,39)*a0*b0*b0 +
     &                    ME(5,40)*y0*b0*b0 +
     &                    ME(5,41)*b0*b0*b0 +
     &                    ME(5,42)*x0*x0*d0 +
     &                    ME(5,43)*x0*a0*d0 +
     &                    ME(5,44)*a0*a0*d0 +
     &                    ME(5,45)*x0*y0*d0 +
     &                    ME(5,46)*a0*y0*d0 +
     &                    ME(5,47)*y0*y0*d0 +
     &                    ME(5,48)*x0*b0*d0 +
     &                    ME(5,49)*a0*b0*d0 +
     &                    ME(5,50)*y0*b0*d0 +
     &                    ME(5,51)*b0*b0*d0 +
     &                    ME(5,52)*x0*d0*d0 +
     &                    ME(5,53)*a0*d0*d0 +
     &                    ME(5,54)*y0*d0*d0 +
     &                    ME(5,55)*b0*d0*d0 +
     &                    ME(5,56)*d0*d0*d0
                      END IF
                      IF ((epart1.GT.10000).AND.(epart1.LT.15500)) THEN
                      
                          vpx = a*vref
                          vpy = b*vref
                          
                          vpz = sqrt(vel**2 - vpx**2 - vpy**2)
                                      
                          z1_temp = x/(tan(PI*(90-70.3)/180)-vpx/vpz)
                      
                          x1 = x + tan(vpx/vpz)*z1_temp
                          y1 = y + tan(vpy/vpz)*z1_temp
                      
                          r_FP = sqrt(x**2 + z1_temp**2)
                          IF (epart1.LT.(Eref*1000)) THEN
                              r_FP = -r_FP
                          END IF    

                          tilt_dist = sqrt((x1-x)**2 + (y1-y)**2 + 
     &                                                z1_temp**2)
                      
                          z1 = S4 + z1_temp
                      
                          t5 = -1e12*t*(1+gamma)/(gamma*vel)                      

                          IF (z1_temp.LT.0.0) THEN
                              tilt_t5 = t5 - 1e12*tilt_dist/vel
                          ELSE IF (z1_temp.GT.0.0) THEN
                              tilt_t5 = t5 + 1e12*tilt_dist/vel
                          END IF

                          ie = INT(0.04*(epart1-10000)+1)
                          
                          l = 1
                          DO WHILE (time0(l).GT.t5)
                              l = l + 1
                          END DO
                          l = l - 1
                          it = INT(0.1*(tburn+t5-time0(l))+1)
                          
                      
                          
                          IF (it.GT.0.0) THEN
                              distr(ie,it) = distr(ie,it) + 1
                              distr_etot(ie) = distr_etot(ie) + 1
                              distr_ttot(it) = distr_ttot(it) + 1
                          END IF
                      END IF
                  END DO
              END DO
          END DO
 
          dE = 25.0
 
          distr_tot = 0.0
          DO i = 1,ie_max     ! 80 energy bins, each 50 keV wide
              DO j = 1,it_max    ! 2500 time bins, each 10 ps wide
                  distr_rebin2(i,j) = 0.0
                  distr_rebin3(i,j) = 0.0
              END DO
          END DO
          IF (dt.EQ.10) THEN    ! i: energy and j: time
              IF (dE.EQ.25) THEN
                  DO j = 1,it_max
                      DO i = 1,ie_max        ! summing up signal for primaries
                          distr_rebin2(i,j) = distr(i,j)
                      END DO
                  END DO
              ELSE IF (dE.EQ.50) THEN
                  DO j = 1,it_max
                      DO i = 1,80        ! summing up signal for primaries
                          DO k = 1,2           ! summing up to 100 keV energy bins
                              distr_rebin2(i,j) = distr_rebin2(i,j)+ 
     &                                        distr(2*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.100) THEN          
                  DO j = 1,it_max
                      DO i = 1,40        ! summing up signal for primaries
                          DO k = 1,4           ! summing up to 100 keV energy bins
                              distr_rebin2(i,j) = distr_rebin2(i,j)+ 
     &                                        distr(4*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.200) THEN
                  DO j = 1,it_max
                      DO i = 1,20        ! summing up signal for primaries
                          DO k = 1,8           ! summing up to 100 keV energy bins
                              distr_rebin2(i,j) = distr_rebin2(i,j)+ 
     &                                        distr(8*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              END IF
          ELSE IF (dt.EQ.20) THEN
              DO i = 1,ie_max
                  DO j = 1,1200
                      DO k = 1,2
                          distr_rebin2(i,j) = distr_rebin2(i,j) + 
     &                                            distr(i,2*(j-1)+k)
                      END DO
                  END DO
              END DO
              IF (dE.EQ.25) THEN

              ELSE IF (dE.EQ.50) THEN
                  DO j = 1,1200
                      DO i = 1,80        ! summing up signal for primaries
                          DO k = 1,2           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(2*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.100) THEN
                  DO j = 1,1200
                      DO i = 1,40        ! summing up signal for primaries
                          DO k = 1,4           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(4*(i-1)+k,j)
                          END DO
                      END DO
                  END DO

              ELSE IF (dE.EQ.200) THEN
                  DO j = 1,1200
                      DO i = 1,20        ! summing up signal for primaries
                          DO k = 1,8           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(8*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              END IF
          ELSE IF (dt.EQ.40) THEN
              DO i = 1,ie_max
                  DO j = 1,600
                      DO k = 1,4
                          distr_rebin2(i,j) = distr_rebin2(i,j) + 
     &                                   distr(i,4*(j-1)+k)
                      END DO
                  END DO
              END DO
              IF (dE.EQ.25) THEN

              ELSE IF (dE.EQ.50) THEN
                  DO j = 1,600
                      DO i = 1,80        ! summing up signal for primaries
                          DO k = 1,2           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(2*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.100) THEN
                  DO j = 1,600
                      DO i = 1,40        ! summing up signal for primaries
                          DO k = 1,4           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(4*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.200) THEN
                  DO j = 1,600
                      DO i = 1,20        ! summing up signal for primaries
                          DO k = 1,8           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(8*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              END IF
          ELSE IF (dt.EQ.60) THEN
              DO i = 1,ie_max
                  DO j = 1,400
                      DO k = 1,6
                          distr_rebin2(i,j) = distr_rebin2(i,j) + 
     &                                   distr(i,6*(j-1)+k)
                      END DO
                  END DO
              END DO
              IF (dE.EQ.25) THEN

              ELSE IF (dE.EQ.50) THEN
                  DO j = 1,400
                      DO i = 1,80        ! summing up signal for primaries
                          DO k = 1,2           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(2*(i-1)+k,j)
                          END DO
                      END DO
                  END DO                  
              ELSE IF (dE.EQ.100) THEN
                  DO j = 1,400
                      DO i = 1,40        ! summing up signal for primaries
                          DO k = 1,4           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(4*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              ELSE IF (dE.EQ.200) THEN
                  DO j = 1,400
                      DO i = 1,20        ! summing up signal for primaries
                          DO k = 1,8           ! summing up to 100 keV energy bins
                              distr_rebin3(i,j) = distr_rebin3(i,j)+ 
     &                                        distr_rebin2(8*(i-1)+k,j)
                          END DO
                      END DO
                  END DO
              END IF
          END IF
          CLOSE (unit = 16)  
      
          IF (dt.EQ.10) THEN    ! i: energy and j: time
              IF (dE.EQ.25) THEN          
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      dsr_sum = 0.0
                      DO i = 1,56       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 72,120       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (25*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO                      
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 72,120
                          E_deut = (25*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2
                      END DO
                      sigma = 1e6*sigma/Yn_sum      ! NOTE: This is sigma_squared in keV
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.01*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
     
                      WRITE(37,*)
     
     
                  END DO
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                          float(distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                      END DO
                  sigma = sqrt(sigma/Yn_sum)
                  BT_err = 10*sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+5.0**2)
                  
                  
              ELSE IF (dE.EQ.50) THEN          
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      dsr_sum = 0.0
                      DO i = 1,28       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 36,60       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (50*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 36,60
                          E_deut = (50*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.01*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
                  END DO
                  
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                          float(distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                      END DO
                  sigma = sqrt(sigma/Yn_sum)
                  BT_err = 10*sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+5.0**2)                  
                  
                  
              ELSE IF (dE.EQ.100) THEN          
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      dsr_sum = 0.0
                      DO i = 1,14       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 18,30       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (100*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 18,30
                          E_deut = (100*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.01*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2             
                  END DO
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                          float(distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                      END DO
                  sigma = sqrt(sigma/Yn_sum)
                  BT_err = 10*sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+5.0**2)
                  
              ELSE IF (dE.EQ.200) THEN
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      dsr_sum = 0.0
                      DO i = 1,7       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 9,15       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (200*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 9,15
                          E_deut = (200*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.01*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.01*
     &                                          float(j))/rR_factor2              
                  END DO
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(distr_max)-8,INT(distr_max)+8
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                          float(distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                      END DO
                  sigma = sqrt(sigma/Yn_sum)
                  BT_err = 10*sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+5.0**2)
                  
              END IF
          ELSE IF (dt.EQ.20) THEN
              IF (dE.EQ.25) THEN       
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4
                      dsr_sum = 0.0
                      DO i = 1,56       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 72,120       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (25*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 72,120
                          E_deut = (25*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.02*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2               
                  END DO


                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.5*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 20*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+10.0**2)                  
                  
              ELSE IF (dE.EQ.50) THEN          
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4
                      dsr_sum = 0.0
                      DO i = 1,28       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 36,60       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (50*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 36,60
                          E_deut = (50*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.02*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2
                  END DO     

                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.5*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 20*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+10.0**2)
                       

              ELSE IF (dE.EQ.100) THEN          
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4
                      dsr_sum = 0.0
                      DO i = 1,14       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 18,30       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (100*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 18,30
                          E_deut = (100*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.02*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2                
                  END DO

                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.5*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 20*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+10.0**2)
                                    
                  
                  
               ELSE IF (dE.EQ.200) THEN
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4
                      dsr_sum = 0.0
                      DO i = 1,7       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 9,15       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (200*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 9,15
                          E_deut = (200*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.02*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.02*
     &                                          float(j))/rR_factor2              
                  END DO
                  

                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.5*distr_max)-4,INT(0.5*distr_max)+4               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.5*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 20*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+10.0**2)
                                    
                  
                  
              END IF                 
          ELSE IF (dt.EQ.40) THEN
              IF (dE.EQ.25) THEN       
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2
                      dsr_sum = 0.0
                      DO i = 1,56       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 72,120       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (25*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 72,120
                          E_deut = (25*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.04*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2               
                  END DO
                  

                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.25*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 40*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+20.0**2)
                                    
                  
                  
              ELSE IF (dE.EQ.50) THEN          
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2
                      dsr_sum = 0.0
                      DO i = 1,28       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 36,60       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (50*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 36,60
                          E_deut = (50*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.04*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                  END DO
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.25*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 40*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+20.0**2)
                  
                  
              ELSE IF (dE.EQ.100) THEN          
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2
                      dsr_sum = 0.0
                      DO i = 1,14       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 18,30       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (100*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 8,30
                          E_deut = (100*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.04*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                  END DO    
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.25*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 40*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+20.0**2)               
                  
                  
               ELSE IF (dE.EQ.200) THEN
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2
                      dsr_sum = 0.0
                      DO i = 1,7       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 9,15       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (200*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 9,15
                          E_deut = (200*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = Ti_factor*(dE_doppler(j)/177)**2
                      dTi(j) = Ti_factor*Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.04*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.04*
     &                                          float(j))/rR_factor2
                  END DO  
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j = INT(0.25*distr_max)-2,INT(0.25*distr_max)+2               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.25*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 40*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+20.0**2)              
                  
                  
              END IF       
          ELSE IF (dt.EQ.60) THEN
              IF (dE.EQ.25) THEN       
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1
                      dsr_sum = 0.0
                      DO i = 1,56       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin2(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 72,120       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (25*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin2(i,j)
                          mean = mean + E_deut*distr_rebin2(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 72,120
                          E_deut = (25*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin2(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = (dE_doppler(j)/177)**2
                      dTi(j) = Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.06*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                  END DO
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.1667*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 60*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+30.0**2)                
                  
                  
              ELSE IF (dE.EQ.50) THEN          
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1
                      dsr_sum = 0.0
                      DO i = 1,28       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 36,60       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (50*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 36,60
                          E_deut = (50*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = (dE_doppler(j)/177)**2
                      dTi(j) = Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.06*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2              
                  END DO
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.1667*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 60*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+30.0**2)   
                  
                  
              ELSE IF (dE.EQ.100) THEN          
                  DO j = INT(0.16667*distr_max)-1,INT(0.16667*distr_max)+1
                      dsr_sum = 0.0
                      DO i = 1,14       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 18,30       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (100*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 18,30
                          E_deut = (100*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = (dE_doppler(j)/177)**2
                      dTi(j) = Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.06*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2               
                  END DO   
                  
                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.1667*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 60*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+30.0**2) 
                  
                  
               ELSE IF (dE.EQ.200) THEN
                  DO j = INT(0.16667*distr_max)-1,INT(0.16667*distr_max)+1
                      dsr_sum = 0.0
                      DO i = 1,7       ! Summing up down-scattered signal (Ed = 10.6-11.5 MeV <-> En = 11.8-12.9 MeV 
                          dsr_sum = dsr_sum + distr_rebin3(i,j)
                      END DO
                      dsr(j) = dsr_sum
                      ddsr(j) = sqrt(dsr(j))
                      Yn_sum = 0.0
                      mean = 0.0
                      DO i = 9,15       ! Summing up primary signal (Ed = 11.3-13.3 MeV <-> En = 13-15 MeV 
                          E_deut = (200*float(i)+10000)/1000
                          Yn_sum = Yn_sum + distr_rebin3(i,j)
                          mean = mean + E_deut*distr_rebin3(i,j)
                      END DO
                      Yn(j) = Yn_sum
                      dYn(j) = sqrt(Yn(j))
                      mean = mean/Yn_sum
                      sigma = 0.0
                      DO i = 9,15
                          E_deut = (200*float(i)+10000)/1000                  
                          sigma=sigma+distr_rebin3(i,j)*(E_deut-mean)**2   ! NOTE: This is sigma_squared
                      END DO
                      sigma = 1e6*sigma/Yn_sum
                      mean_value(j) = mean
                      dmean_value(j) = sqrt(sigma/Yn(j))
                      dE_doppler(j)=sqrt(5.5*sigma-IRF**2)
                      yield(j) = Yn(j)/efficiency
                      dyield(j) = dYn(j)/efficiency
                      Ti(j) = (dE_doppler(j)/177)**2
                      dTi(j) = Ti(j)*(1+(IRF/(0.8889*177*
     &                        sqrt(dE_doppler(j))))**2)*1/sqrt(Yn(j))
                      rR(j) = 20.7*(dsr(j)/Yn(j))    !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      drR(j) = 20.7*(ddsr(j)/Yn(j))  !  nd-XS at 12.3 MeV ~ 1275 mb, and at 14 MeV 501 mb.
                      rR_factor2 = m1 + k1*0.06*float(j)
                      rR(j) = rR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                      drR(j) = drR(j)*rR_factor1*(138.7 - 8.4885*0.06*
     &                                          float(j))/rR_factor2
                  END DO

                  sigma = 0.0
                  Yn_sum = 0.0
                  DO j=INT(0.1667*distr_max)-1,INT(0.1667*distr_max)+1               
                      sigma = sigma + Yn(j)*(float(j) - 
     &                                        (0.1667*distr_max))**2
                      Yn_sum = Yn_sum + Yn(j)
                  END DO
                  sigma = 60*sqrt(sigma/Yn_sum)
                  BT_err = sigma/sqrt(Yn_sum)    ! ps
                  rR_ramp_err = sqrt(BT_err**2+30.0**2)                        
                  
                  
              END IF
          END IF
          
          Ti_sum1 = 0.0
          Ti_sum2 = 0.0
          Ti_sum3 = 0.0
          Ti_sum4 = 0.0
          
          dTi_slope = 0.0
          
          rR_sum1 = 0.0
          rR_sum2 = 0.0
          rR_sum3 = 0.0
          rR_sum4 = 0.0
          
          drR_slope = 0.0
          
          IF (dt.EQ.10) THEN    ! i: energy and j: time
              step = 3
              DO j = INT(distr_max)-step,INT(distr_max)+step+1
                  IF (Ti(j).GT.0.0) THEN
                      Ti(j) =  Ti(j)
                      dTi(j) = dTi(j)
                  ELSE 
                      Ti(j) = 0.0
                      dTi(j) = 1e5
                  END IF
                  IF (rR(j).GT.0.0) THEN
                      rR(j) =  rR(j)
                      drR(j) = drR(j)
                  ELSE 
                      rR(j) = 0.0
                      drR(j) = 1e5
                  END IF
                  Ti_sum1 = Ti_sum1 + 10.0*float(j)*Ti(j)
                  Ti_sum2 = Ti_sum2 + 10.0*float(j)
                  Ti_sum3 = Ti_sum3 + Ti(j)
                  Ti_sum4 = Ti_sum4 + (10.0*float(j))**2
                  rR_sum1 = rR_sum1 + 10.0*float(j)*rR(j)
                  rR_sum2 = rR_sum2 + 10.0*float(j)
                  rR_sum3 = rR_sum3 + rR(j)
                  rR_sum4 = rR_sum4 + (10.0*float(j))**2
              END DO 
              Ti_const = (Ti_sum4*Ti_sum3 - Ti_sum2*Ti_sum1)/
     &                         (float(2*step+2)*Ti_sum4 - Ti_sum2**2)
              Ti_slope = (float(2*step+2)*Ti_sum1 - Ti_sum2*Ti_sum3)/
     &                          (float(2*step+2)*Ti_sum4 - Ti_sum2**2)
     
              rR_const = (rR_sum4*rR_sum3 - rR_sum2*rR_sum1)/
     &                          (float(2*step+2)*rR_sum4 - rR_sum2**2)
              rR_slope = (float(2*step+2)*rR_sum1 - rR_sum2*rR_sum3)/
     &                          (float(2*step+2)*rR_sum4 - rR_sum2**2)
              DO j =  INT(distr_max)-step,INT(distr_max)+step+1
                  dTi_slope = dTi_slope + (Ti(j) -
     &                Ti_const - Ti_slope*10.0*float(j))**2
                 drR_slope = drR_slope + (rR(j) -
     &                rR_const - rR_slope*10.0*float(j))**2
              END DO
              dTi_slope = sqrt(dTi_slope/float(2*step-2))*
     &                    sqrt(float(2*step+2)/(float(2*step+2)*Ti_sum4
     &                                                   - Ti_sum2**2))
              drR_slope = sqrt(drR_slope/float(2*step-2))*
     &                    sqrt(float(2*step+2)/(float(2*step+2)*rR_sum4
     &                                                   - rR_sum2**2))
     
     



     
          ELSE IF (dt.EQ.20) THEN
              step = 1
              DO j = INT(0.5*distr_max)-step,INT(0.5*distr_max)+step+1
                  IF (Ti(j).GT.0.0) THEN
                      Ti(j) =  Ti(j)
                      dTi(j) = dTi(j)
                  ELSE 
                      Ti(j) = 0.0
                      dTi(j) = 1e5
                  END IF
                  IF (rR(j).GT.0.0) THEN
                      rR(j) =  rR(j)
                      drR(j) = drR(j)
                  ELSE 
                      rR(j) = 0.0
                      drR(j) = 1e5
                  END IF
                  Ti_sum1 = Ti_sum1 + 20.0*float(j)*Ti(j)
                  Ti_sum2 = Ti_sum2 + 20.0*float(j)
                  Ti_sum3 = Ti_sum3 + Ti(j)
                  Ti_sum4 = Ti_sum4 + (20.0*float(j))**2
                  rR_sum1 = rR_sum1 + 20.0*float(j)*rR(j)
                  rR_sum2 = rR_sum2 + 20.0*float(j)
                  rR_sum3 = rR_sum3 + rR(j)
                  rR_sum4 = rR_sum4 + (20.0*float(j))**2
              END DO 
              Ti_const = (Ti_sum4*Ti_sum3 - Ti_sum2*Ti_sum1)/
     &                         (float(2*step+2)*Ti_sum4 - Ti_sum2**2)
              Ti_slope = (float(2*step+2)*Ti_sum1 - Ti_sum2*Ti_sum3)/
     &                          (float(2*step+2)*Ti_sum4 - Ti_sum2**2)
     
              rR_const = (rR_sum4*rR_sum3 - rR_sum2*rR_sum1)/
     &                          (float(2*step+2)*rR_sum4 - rR_sum2**2)
              rR_slope = (float(2*step+2)*rR_sum1 - rR_sum2*rR_sum3)/
     &                          (float(2*step+2)*rR_sum4 - rR_sum2**2)
              DO j =  INT(0.5*distr_max)-step,INT(0.5*distr_max)+step+1
                  dTi_slope = dTi_slope + (Ti(j) -
     &                Ti_const - Ti_slope*20.0*float(j))**2
                 drR_slope = drR_slope + (rR(j) -
     &                rR_const - rR_slope*20.0*float(j))**2
              END DO
              dTi_slope = sqrt(dTi_slope/float(2*step))*
     &                    sqrt(float(2*step+2)/(float(2*step+2)*Ti_sum4
     &                                                   - Ti_sum2**2))
              drR_slope = sqrt(drR_slope/float(2*step))*
     &                    sqrt(float(2*step+2)/(float(2*step+2)*rR_sum4
     &                                                   - rR_sum2**2))
          ELSE IF (dt.EQ.40) THEN
          
          
          
              step = 1
              DO j = INT(0.25*distr_max)-step,INT(0.25*distr_max)+step
                  IF (Ti(j).GT.0.0) THEN
                      Ti(j) =  Ti(j)
                      dTi(j) = dTi(j)
                  ELSE 
                      Ti(j) = 0.0
                      dTi(j) = 1e5
                  END IF
                  IF (rR(j).GT.0.0) THEN
                      rR(j) =  rR(j)
                      drR(j) = drR(j)
                  ELSE 
                      rR(j) = 0.0
                      drR(j) = 1e5
                  END IF
                  Ti_sum1 = Ti_sum1 + 40.0*float(j)*Ti(j)
                  Ti_sum2 = Ti_sum2 + 40.0*float(j)
                  Ti_sum3 = Ti_sum3 + Ti(j)
                  Ti_sum4 = Ti_sum4 + (40.0*float(j))**2
                  rR_sum1 = rR_sum1 + 40.0*float(j)*rR(j)
                  rR_sum2 = rR_sum2 + 40.0*float(j)
                  rR_sum3 = rR_sum3 + rR(j)
                  rR_sum4 = rR_sum4 + (40.0*float(j))**2
              END DO 
              Ti_const = (Ti_sum4*Ti_sum3 - Ti_sum2*Ti_sum1)/
     &                         (float(step+2)*Ti_sum4 - Ti_sum2**2)
              Ti_slope = (float(step+2)*Ti_sum1 - Ti_sum2*Ti_sum3)/
     &                          (float(step+2)*Ti_sum4 - Ti_sum2**2)
     
              rR_const = (rR_sum4*rR_sum3 - rR_sum2*rR_sum1)/
     &                          (float(step+2)*rR_sum4 - rR_sum2**2)
              rR_slope = (float(step+2)*rR_sum1 - rR_sum2*rR_sum3)/
     &                          (float(step+2)*rR_sum4 - rR_sum2**2)
              DO j =  INT(0.25*distr_max)-step,INT(0.25*distr_max)+step
                  dTi_slope = dTi_slope + (Ti(j) -
     &                Ti_const - Ti_slope*40.0*float(j))**2
                 drR_slope = drR_slope + (rR(j) -
     &                rR_const - rR_slope*40.0*float(j))**2
              END DO
              dTi_slope = sqrt(dTi_slope/float(step))*
     &                    sqrt(float(step+2)/(float(step+2)*Ti_sum4
     &                                                   - Ti_sum2**2))
              drR_slope = sqrt(drR_slope/float(step))*
     &                    sqrt(float(step+2)/(float(step+2)*rR_sum4
     &                                                   - rR_sum2**2))
     
          ELSE IF (dt.EQ.60) THEN 


              step = 1
              DO j = INT(0.16667*distr_max),INT(0.16667*distr_max)+step
                  IF (Ti(j).GT.0.0) THEN
                      Ti(j) =  Ti(j)
                      dTi(j) = dTi(j)
                  ELSE 
                      Ti(j) = 0.0
                      dTi(j) = 1e5
                  END IF
                  IF (rR(j).GT.0.0) THEN
                      rR(j) =  rR(j)
                      drR(j) = drR(j)
                  ELSE 
                      rR(j) = 0.0
                      drR(j) = 1e5
                  END IF
                  Ti_sum1 = Ti_sum1 + 60.0*float(j)*Ti(j)
                  Ti_sum2 = Ti_sum2 + 60.0*float(j)
                  Ti_sum3 = Ti_sum3 + Ti(j)
                  Ti_sum4 = Ti_sum4 + (60.0*float(j))**2
                  rR_sum1 = rR_sum1 + 60.0*float(j)*rR(j)
                  rR_sum2 = rR_sum2 + 60.0*float(j)
                  rR_sum3 = rR_sum3 + rR(j)
                  rR_sum4 = rR_sum4 + (60.0*float(j))**2
              END DO 
              Ti_const = (Ti_sum4*Ti_sum3 - Ti_sum2*Ti_sum1)/
     &                         (float(2*step)*Ti_sum4 - Ti_sum2**2)
              Ti_slope = (float(2*step)*Ti_sum1 - Ti_sum2*Ti_sum3)/
     &                          (float(2*step)*Ti_sum4 - Ti_sum2**2)
     
              rR_const = (rR_sum4*rR_sum3 - rR_sum2*rR_sum1)/
     &                          (float(2*step)*rR_sum4 - rR_sum2**2)
              rR_slope = (float(2*step)*rR_sum1 - rR_sum2*rR_sum3)/
     &                          (float(2*step)*rR_sum4 - rR_sum2**2)
              DO j = INT(0.16667*distr_max)-step,
     &                                INT(0.16667*distr_max)+step
                  dTi_slope = dTi_slope + (Ti(j) -
     &                Ti_const - Ti_slope*60.0*float(j))**2
                 drR_slope = drR_slope + (rR(j) -
     &                rR_const - rR_slope*60.0*float(j))**2
              END DO
              dTi_slope = sqrt(dTi_slope/float(step))*
     &                    sqrt(float(step+2)/(float(step+2)*Ti_sum4
     &                                                   - Ti_sum2**2))
              drR_slope = sqrt(drR_slope/float(step))*
     &                    sqrt(float(step+2)/(float(step+2)*rR_sum4
     &                                                   - rR_sum2**2))




          END IF

          WRITE(47,*)weight, Ti_slope, dTi_slope, rR_slope, drR_slope
c          WRITE(47,*)weight, Ti_sum1, Ti_sum2, Ti_sum3, Ti_sum4
          
          write(*,*)ik
          
c          IF (dt.EQ.10) THEN    ! i: energy and j: time      
c              j = INT(distr_max)              
c              WRITE(47,*)npart_tot/efficiency, 
c     &                       1.84*1e-3*(mean_value(j)-12.384),
c     &                                    1.84*dmean_value(j),
c     &                                          Ti(j), dTi(j), 
c     &                                          rR(j), drR(j),
c     &                                    BT_err, rR_ramp_err
c          ELSE IF (dt.EQ.20) THEN
c              j = INT(0.5*distr_max)              
c              WRITE(47,*)npart_tot/efficiency, 
c     &                       1.84*1e-3*(mean_value(j)-12.384),
c     &                                    1.84*dmean_value(j),
c     &                                          Ti(j), dTi(j), 
c     &                                          rR(j), drR(j),
c     &                                    BT_err, rR_ramp_err
c          ELSE IF (dt.EQ.40) THEN
c              j = INT(0.25*distr_max)
c              WRITE(47,*)npart_tot/efficiency, 
c     &                       1.84*1e-3*(mean_value(j)-12.298),
c     &                                    1.84*dmean_value(j),
c     &                                          Ti(j), dTi(j), 
c     &                                          rR(j), drR(j),
c     &                                    BT_err, rR_ramp_err
c          ELSE IF (dt.EQ.60) THEN
c              j = INT(0.16667*distr_max)
c              WRITE(47,*)npart_tot/efficiency, 
c    &                       1.84*1e-3*(mean_value(j)-12.194),
c     &                                    1.84*dmean_value(j),
c     &                                          Ti(j), dTi(j), 
c     &                                          rR(j), drR(j),
c     &                                    BT_err, rR_ramp_err
c          END IF
c          WRITE(*,*)ik, npart_tot/efficiency
      END DO
      CLOSE (unit = 47)
      END
      
      FUNCTION RAN0(idum)
      INTEGER idum,IA,IM,IQ,IR,MASK
      REAL ran0,AM
      PARAMETER (IA=16807,IM=2147483647,AM=1./IM,IQ=127773,IR=2836,
     *MASK=123459876)
      INTEGER k
      idum=ieor(idum,MASK)
      k=idum/IQ
      idum=IA*(idum-k*IQ)-IR*k
      if (idum.lt.0) idum=idum+IM
      ran0=AM*idum
      idum=ieor(idum,MASK)
      return
      END      
      
      FUNCTION ie_find(energy)
      PARAMETER (itable = 300000)
      DIMENSION e_table(itable)
      COMMON /energies/ e_table, emax, i_top_e
      iup = i_top_e
      ilo = 1
      igap = iup - ilo
      DO WHILE (igap.GT.1)
          itest=(iup+ilo)/2
      IF (e_table(itest).LE.energy) THEN
		  iup=itest
      ELSE
          ilo=itest
      ENDIF
          igap = iup-ilo
      END DO
      ie_find=ilo
      RETURN
      END
      
      FUNCTION SPL(n,t,y,z,x)
      DIMENSION t(n),y(n),z(n)
      i=n-1
      diff = x-t(i)
      DO WHILE (diff.LT.0 .AND. i.GE.2)
          i=i-1
          diff=x-t(i)
      END DO
      h=t(i+1)-t(i)
      b=(y(i+1)-y(i))/h-h*(z(i+1)+2.0*z(i))/6.0
      p=0.5*z(i)+diff*(z(i+1)-z(i))/(6.0*h)
      p=b+diff*p
      spl=y(i) + diff*p
      RETURN
      END
      
      SUBROUTINE ZSPLINE(n,t,y,h,b,u,v,z)
      DIMENSION t(n), y(n), h(n), b(n), u(n), v(n), z(n)
      DO i=1,n-1
          h(i)=t(i+1)-t(i)
          b(i)=(y(i+1)-y(i))/h(i)
      END DO
      u(2)=2.0*(h(1)+h(2))
      v(2)=6.0*(b(2)-b(1))
      DO i=3,n-1
          u(i)=2.0*(h(i)+h(i+1))-h(i-1)**2/u(i-1)
          v(i)=6.0*(b(i)-b(i-1))-h(i-1)*v(i-1)/u(i-1)
      END DO
      z(n)=0.0
      DO i=n-1,2,-1
          z(i)=(v(i)-h(i)*z(i+1))/u(i)
      END DO
      z(1)=0.0
      RETURN
      END